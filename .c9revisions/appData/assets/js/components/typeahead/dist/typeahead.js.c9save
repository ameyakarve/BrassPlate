{"ts":1362030684104,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * typeahead.js 0.8.1\n * https://github.com/twitter/typeahead\n * Copyright 2013 Twitter, Inc. and other contributors; Licensed MIT\n */\ndefine(['jquery'], function($){\n\n\n\n(function() {\n    var VERSION = \"0.8.1\";\n    var utils = {\n        isMsie: function() {\n            return /msie [\\w.]+/i.test(navigator.userAgent);\n        },\n        isString: function(obj) {\n            return typeof obj === \"string\";\n        },\n        isNumber: function(obj) {\n            return typeof obj === \"number\";\n        },\n        isArray: $.isArray,\n        isFunction: $.isFunction,\n        isObject: function(obj) {\n            return obj === Object(obj);\n        },\n        isUndefined: function(obj) {\n            return typeof obj === \"undefined\";\n        },\n        bind: $.proxy,\n        bindAll: function(obj) {\n            var val;\n            for (var key in obj) {\n                utils.isFunction(val = obj[key]) && (obj[key] = $.proxy(val, obj));\n            }\n        },\n        indexOf: function(haystack, needle) {\n            for (var i = 0; i < haystack.length; i++) {\n                if (haystack[i] === needle) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n        each: $.each,\n        map: $.map,\n        filter: function(obj, test) {\n            var results = [];\n            $.each(obj, function(key, val) {\n                if (test(val, key, obj)) {\n                    results.push(val);\n                }\n            });\n            return results;\n        },\n        every: function(obj, test) {\n            var result = true;\n            if (!obj) {\n                return result;\n            }\n            $.each(obj, function(key, val) {\n                if (!(result = test.call(null, val, key, obj))) {\n                    return false;\n                }\n            });\n            return !!result;\n        },\n        mixin: $.extend,\n        getUniqueId: function() {\n            var counter = 0;\n            return function() {\n                return counter++;\n            };\n        }(),\n        debounce: function(func, wait, immediate) {\n            var timeout, result;\n            return function() {\n                var context = this, args = arguments, later, callNow;\n                later = function() {\n                    timeout = null;\n                    if (!immediate) {\n                        result = func.apply(context, args);\n                    }\n                };\n                callNow = immediate && !timeout;\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n                if (callNow) {\n                    result = func.apply(context, args);\n                }\n                return result;\n            };\n        },\n        throttle: function(func, wait) {\n            var context, args, timeout, result, previous, later;\n            previous = 0;\n            later = function() {\n                previous = new Date();\n                timeout = null;\n                result = func.apply(context, args);\n            };\n            return function() {\n                var now = new Date(), remaining = wait - (now - previous);\n                context = this;\n                args = arguments;\n                if (remaining <= 0) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                    previous = now;\n                    result = func.apply(context, args);\n                } else if (!timeout) {\n                    timeout = setTimeout(later, remaining);\n                }\n                return result;\n            };\n        },\n        uniqueArray: function(array) {\n            var u = {}, a = [];\n            for (var i = 0, l = array.length; i < l; ++i) {\n                if (u.hasOwnProperty(array[i])) {\n                    continue;\n                }\n                a.push(array[i]);\n                u[array[i]] = 1;\n            }\n            return a;\n        },\n        tokenizeQuery: function(str) {\n            return $.trim(str).toLowerCase().split(/[\\s]+/);\n        },\n        tokenizeText: function(str) {\n            return $.trim(str).toLowerCase().split(/[\\s\\-_]+/);\n        },\n        getProtocol: function() {\n            return location.protocol;\n        },\n        noop: function() {}\n    };\n    var EventTarget = function() {\n        var eventSplitter = /\\s+/;\n        return {\n            on: function(events, callback) {\n                var event;\n                if (!callback) {\n                    return this;\n                }\n                this._callbacks = this._callbacks || {};\n                events = events.split(eventSplitter);\n                while (event = events.shift()) {\n                    this._callbacks[event] = this._callbacks[event] || [];\n                    this._callbacks[event].push(callback);\n                }\n                return this;\n            },\n            trigger: function(events, data) {\n                var event, callbacks;\n                if (!this._callbacks) {\n                    return this;\n                }\n                events = events.split(eventSplitter);\n                while (event = events.shift()) {\n                    if (callbacks = this._callbacks[event]) {\n                        for (var i = 0; i < callbacks.length; i += 1) {\n                            callbacks[i].call(this, {\n                                type: event,\n                                data: data\n                            });\n                        }\n                    }\n                }\n                return this;\n            }\n        };\n    }();\n    var PersistentStorage = function() {\n        var ls = window.localStorage, methods;\n        function PersistentStorage(namespace) {\n            this.prefix = [ \"__\", namespace, \"__\" ].join(\"\");\n            this.ttlKey = \"__ttl__\";\n            this.keyMatcher = new RegExp(\"^\" + this.prefix);\n        }\n        if (window.localStorage && window.JSON) {\n            methods = {\n                _prefix: function(key) {\n                    return this.prefix + key;\n                },\n                _ttlKey: function(key) {\n                    return this._prefix(key) + this.ttlKey;\n                },\n                get: function(key) {\n                    if (this.isExpired(key)) {\n                        this.remove(key);\n                    }\n                    return decode(ls.getItem(this._prefix(key)));\n                },\n                set: function(key, val, ttl) {\n                    if (utils.isNumber(ttl)) {\n                        ls.setItem(this._ttlKey(key), encode(now() + ttl));\n                    } else {\n                        ls.removeItem(this._ttlKey(key));\n                    }\n                    return ls.setItem(this._prefix(key), encode(val));\n                },\n                remove: function(key) {\n                    ls.removeItem(this._ttlKey(key));\n                    ls.removeItem(this._prefix(key));\n                    return this;\n                },\n                clear: function() {\n                    var i, key, keys = [], len = ls.length;\n                    for (i = 0; i < len; i++) {\n                        if ((key = ls.key(i)).match(this.keyMatcher)) {\n                            keys.push(key.replace(this.keyMatcher, \"\"));\n                        }\n                    }\n                    for (i = keys.length; i--; ) {\n                        this.remove(keys[i]);\n                    }\n                    return this;\n                },\n                isExpired: function(key) {\n                    var ttl = decode(ls.getItem(this._ttlKey(key)));\n                    return utils.isNumber(ttl) && now() > ttl ? true : false;\n                }\n            };\n        } else {\n            methods = {\n                get: utils.noop,\n                set: utils.noop,\n                remove: utils.noop,\n                clear: utils.noop,\n                isExpired: utils.noop\n            };\n        }\n        utils.mixin(PersistentStorage.prototype, methods);\n        return PersistentStorage;\n        function now() {\n            return new Date().getTime();\n        }\n        function encode(val) {\n            return JSON.stringify(utils.isUndefined(val) ? null : val);\n        }\n        function decode(val) {\n            return JSON.parse(val);\n        }\n    }();\n    var RequestCache = function() {\n        function RequestCache(o) {\n            utils.bindAll(this);\n            o = o || {};\n            this.sizeLimit = o.sizeLimit || 10;\n            this.cache = {};\n            this.cachedKeysByAge = [];\n        }\n        utils.mixin(RequestCache.prototype, {\n            get: function(url) {\n                return this.cache[url];\n            },\n            set: function(url, resp) {\n                var requestToEvict;\n                if (this.cachedKeysByAge.length === this.sizeLimit) {\n                    requestToEvict = this.cachedKeysByAge.shift();\n                    delete this.cache[requestToEvict];\n                }\n                this.cache[url] = resp;\n                this.cachedKeysByAge.push(url);\n            }\n        });\n        return RequestCache;\n    }();\n    var Transport = function() {\n        function Transport(o) {\n            var rateLimitFn;\n            utils.bindAll(this);\n            o = o || {};\n            rateLimitFn = /^throttle$/i.test(o.rateLimitFn) ? utils.throttle : utils.debounce;\n            this.wait = o.wait || 300;\n            this.wildcard = o.wildcard || \"%QUERY\";\n            this.maxConcurrentRequests = o.maxConcurrentRequests || 6;\n            this.concurrentRequests = 0;\n            this.onDeckRequestArgs = null;\n            this.cache = new RequestCache();\n            this.get = rateLimitFn(this.get, this.wait);\n        }\n        utils.mixin(Transport.prototype, {\n            _incrementConcurrentRequests: function() {\n                this.concurrentRequests++;\n            },\n            _decrementConcurrentRequests: function() {\n                this.concurrentRequests--;\n            },\n            _belowConcurrentRequestsThreshold: function() {\n                return this.concurrentRequests < this.maxConcurrentRequests;\n            },\n            get: function(url, query, cb) {\n                var that = this, resp;\n                url = url.replace(this.wildcard, encodeURIComponent(query || \"\"));\n                if (resp = this.cache.get(url)) {\n                    cb && cb(resp);\n                } else if (this._belowConcurrentRequestsThreshold()) {\n                    $.ajax({\n                        url: url,\n                        type: \"GET\",\n                        dataType: \"json\",\n                        beforeSend: function() {\n                            that._incrementConcurrentRequests();\n                        },\n                        success: function(resp) {\n                            cb && cb(resp);\n                            that.cache.set(url, resp);\n                        },\n                        complete: function() {\n                            that._decrementConcurrentRequests();\n                            if (that.onDeckRequestArgs) {\n                                that.get.apply(that, that.onDeckRequestArgs);\n                                that.onDeckRequestArgs = null;\n                            }\n                        }\n                    });\n                } else {\n                    this.onDeckRequestArgs = [].slice.call(arguments, 0);\n                }\n            }\n        });\n        return Transport;\n    }();\n    var Dataset = function() {\n        function Dataset(o) {\n            utils.bindAll(this);\n            this.storage = new PersistentStorage(o.name);\n            this.adjacencyList = {};\n            this.itemHash = {};\n            this.name = o.name;\n            this.resetDataOnProtocolSwitch = o.resetDataOnProtocolSwitch || false;\n            this.queryUrl = o.remote;\n            this.transport = o.transport;\n            this.limit = o.limit || 10;\n            this._customMatcher = o.matcher || null;\n            this._customRanker = o.ranker || null;\n            this._ttl_ms = o.ttl_ms || 3 * 24 * 60 * 60 * 1e3;\n            this.keys = {\n                version: \"version\",\n                protocol: \"protocol\",\n                itemHash: \"itemHash\",\n                adjacencyList: \"adjacencyList\"\n            };\n            o.local && this._processLocalData(o.local);\n            o.prefetch && this._loadPrefetchData(o.prefetch);\n        }\n        utils.mixin(Dataset.prototype, {\n            _processLocalData: function(data) {\n                data && this._mergeProcessedData(this._processData(data));\n            },\n            _loadPrefetchData: function(url) {\n                var that = this, itemHash = this.storage.get(this.keys.itemHash), adjacencyList = this.storage.get(this.keys.adjacencyList), protocol = this.storage.get(this.keys.protocol), version = this.storage.get(this.keys.version), isExpired = version !== VERSION || protocol !== utils.getProtocol();\n                if (itemHash && adjacencyList && !isExpired) {\n                    this._mergeProcessedData({\n                        itemHash: itemHash,\n                        adjacencyList: adjacencyList\n                    });\n                } else {\n                    $.getJSON(url).done(processPrefetchData);\n                }\n                function processPrefetchData(data) {\n                    var processedData = that._processData(data), itemHash = processedData.itemHash, adjacencyList = processedData.adjacencyList;\n                    that.storage.set(that.keys.itemHash, itemHash, that._ttl_ms);\n                    that.storage.set(that.keys.adjacencyList, adjacencyList, that._ttl_ms);\n                    that.storage.set(that.keys.version, VERSION, that._ttl_ms);\n                    that.storage.set(that.keys.protocol, utils.getProtocol(), that._ttl_ms);\n                    that._mergeProcessedData(processedData);\n                }\n            },\n            _processData: function(data) {\n                var itemHash = {}, adjacencyList = {};\n                utils.each(data, function(i, item) {\n                    var id;\n                    if (utils.isString(item)) {\n                        item = {\n                            value: item,\n                            tokens: utils.tokenizeText(item)\n                        };\n                    }\n                    item.tokens = utils.map(item.tokens || [], function(token) {\n                        return token.toLowerCase();\n                    });\n                    itemHash[id = utils.getUniqueId(item.value)] = item;\n                    utils.each(item.tokens, function(i, token) {\n                        var char = token.charAt(0), adjacency = adjacencyList[char] || (adjacencyList[char] = [ id ]);\n                        !~utils.indexOf(adjacency, id) && adjacency.push(id);\n                    });\n                });\n                return {\n                    itemHash: itemHash,\n                    adjacencyList: adjacencyList\n                };\n            },\n            _mergeProcessedData: function(processedData) {\n                var that = this;\n                utils.mixin(this.itemHash, processedData.itemHash);\n                utils.each(processedData.adjacencyList, function(char, adjacency) {\n                    var masterAdjacency = that.adjacencyList[char];\n                    that.adjacencyList[char] = masterAdjacency ? masterAdjacency.concat(adjacency) : adjacency;\n                });\n            },\n            _getPotentiallyMatchingIds: function(terms) {\n                var potentiallyMatchingIds = [];\n                var lists = [];\n                utils.map(terms, utils.bind(function(term) {\n                    var list = this.adjacencyList[term.charAt(0)];\n                    if (!list) {\n                        return;\n                    }\n                    lists.push(list);\n                }, this));\n                if (lists.length === 1) {\n                    return lists[0];\n                }\n                var listLengths = [];\n                $.each(lists, function(i, list) {\n                    listLengths.push(list.length);\n                });\n                var shortestListIndex = utils.indexOf(listLengths, Math.min.apply(null, listLengths)) || 0;\n                var shortestList = lists[shortestListIndex] || [];\n                potentiallyMatchingIds = utils.map(shortestList, function(item) {\n                    var idInEveryList = utils.every(lists, function(list) {\n                        return utils.indexOf(list, item) > -1;\n                    });\n                    if (idInEveryList) {\n                        return item;\n                    }\n                });\n                return potentiallyMatchingIds;\n            },\n            _getItemsFromIds: function(ids) {\n                var items = [];\n                utils.map(ids, utils.bind(function(id) {\n                    var item = this.itemHash[id];\n                    if (item) {\n                        items.push(item);\n                    }\n                }, this));\n                return items;\n            },\n            _matcher: function(terms) {\n                if (this._customMatcher) {\n                    var customMatcher = this._customMatcher;\n                    return function(item) {\n                        return customMatcher(item);\n                    };\n                } else {\n                    return function(item) {\n                        var tokens = item.tokens;\n                        var allTermsMatched = utils.every(terms, function(term) {\n                            var tokensMatched = utils.filter(tokens, function(token) {\n                                return token.indexOf(term) === 0;\n                            });\n                            return tokensMatched.length;\n                        });\n                        if (allTermsMatched) {\n                            return item;\n                        }\n                    };\n                }\n            },\n            _compareItems: function(a, b, areLocalItems) {\n                var aScoreBoost = !a.score_boost ? 0 : a.score_boost, bScoreBoost = !b.score_boost ? 0 : b.score_boost, aScore = !a.score ? 0 : a.score, bScore = !b.score ? 0 : b.score;\n                if (areLocalItems) {\n                    return b.weight + bScoreBoost - (a.weight + aScoreBoost);\n                } else {\n                    return bScore + bScoreBoost - (aScore + aScoreBoost);\n                }\n            },\n            _ranker: function(a, b) {\n                if (this._customRanker) {\n                    return this._customRanker(a, b);\n                } else {\n                    var aIsLocal = a.weight && a.weight !== 0;\n                    var bIsLocal = b.weight && b.weight !== 0;\n                    if (aIsLocal && !bIsLocal) {\n                        return -1;\n                    } else if (bIsLocal && !aIsLocal) {\n                        return 1;\n                    } else {\n                        return aIsLocal && bIsLocal ? this._compareItems(a, b, true) : this._compareItems(a, b, false);\n                    }\n                }\n            },\n            _processRemoteSuggestions: function(callback, matchedItems) {\n                var that = this;\n                return function(data) {\n                    utils.each(data, function(i, remoteItem) {\n                        var isDuplicate = false;\n                        remoteItem = utils.isString(remoteItem) ? {\n                            value: remoteItem\n                        } : remoteItem;\n                        utils.each(matchedItems, function(i, localItem) {\n                            if (remoteItem.value === localItem.value) {\n                                isDuplicate = true;\n                                return false;\n                            }\n                        });\n                        !isDuplicate && matchedItems.push(remoteItem);\n                        return matchedItems.length < that.limit;\n                    });\n                    callback && callback(matchedItems);\n                };\n            },\n            getSuggestions: function(query, callback) {\n                var terms = utils.tokenizeQuery(query);\n                var potentiallyMatchingIds = this._getPotentiallyMatchingIds(terms);\n                var potentiallyMatchingItems = this._getItemsFromIds(potentiallyMatchingIds);\n                var matchedItems = utils.filter(potentiallyMatchingItems, this._matcher(terms));\n                matchedItems.sort(this._ranker);\n                callback && callback(matchedItems);\n                if (matchedItems.length < this.limit && this.queryUrl) {\n                    this.transport.get(this.queryUrl, query, this._processRemoteSuggestions(callback, matchedItems));\n                }\n            }\n        });\n        return Dataset;\n    }();\n    var InputView = function() {\n        function InputView(o) {\n            var that = this;\n            utils.bindAll(this);\n            this.specialKeyCodeMap = {\n                9: \"tab\",\n                27: \"esc\",\n                37: \"left\",\n                39: \"right\",\n                13: \"enter\",\n                38: \"up\",\n                40: \"down\"\n            };\n            this.query = \"\";\n            this.$hint = $(o.hint);\n            this.$input = $(o.input).on(\"blur\", this._handleBlur).on(\"focus\", this._handleFocus).on(\"keydown\", this._handleSpecialKeyEvent);\n            if (!utils.isMsie()) {\n                this.$input.on(\"input\", this._compareQueryToInputValue);\n            } else {\n                this.$input.on(\"keydown keypress cut paste\", function(e) {\n                    if (that.specialKeyCodeMap[e.which || e.keyCode]) {\n                        return;\n                    }\n                    setTimeout(that._compareQueryToInputValue, 0);\n                });\n            }\n            this.$overflowHelper = buildOverflowHelper(this.$input);\n        }\n        utils.mixin(InputView.prototype, EventTarget, {\n            _handleFocus: function() {\n                this.trigger(\"focus\");\n            },\n            _handleBlur: function() {\n                this.trigger(\"blur\");\n            },\n            _handleSpecialKeyEvent: function($e) {\n                var keyName = this.specialKeyCodeMap[$e.which || $e.keyCode];\n                keyName && this.trigger(keyName, $e);\n            },\n            _compareQueryToInputValue: function() {\n                var inputValue = this.getInputValue(), isSameQuery = compareQueries(this.query, inputValue), isSameQueryExceptWhitespace = isSameQuery ? this.query.length !== inputValue.length : false;\n                if (isSameQueryExceptWhitespace) {\n                    this.trigger(\"whitespaceChange\", {\n                        value: this.query\n                    });\n                } else if (!isSameQuery) {\n                    this.trigger(\"queryChange\", {\n                        value: this.query = inputValue\n                    });\n                }\n            },\n            focus: function() {\n                this.$input.focus();\n            },\n            blur: function() {\n                this.$input.blur();\n            },\n            getQuery: function() {\n                return this.query;\n            },\n            getInputValue: function() {\n                return this.$input.val();\n            },\n            setInputValue: function(value, silent) {\n                this.$input.val(value);\n                if (silent !== true) {\n                    this._compareQueryToInputValue();\n                }\n            },\n            getHintValue: function() {\n                return this.$hint.val();\n            },\n            setHintValue: function(value) {\n                this.$hint.val(value);\n            },\n            getLanguageDirection: function() {\n                return (this.$input.css(\"direction\") || \"ltr\").toLowerCase();\n            },\n            isOverflow: function() {\n                this.$overflowHelper.text(this.getInputValue());\n                return this.$overflowHelper.width() > this.$input.width();\n            },\n            isCursorAtEnd: function() {\n                var valueLength = this.$input.val().length, selectionStart = this.$input[0].selectionStart, range;\n                if (utils.isNumber(selectionStart)) {\n                    return selectionStart === valueLength;\n                } else if (document.selection) {\n                    range = document.selection.createRange();\n                    range.moveStart(\"character\", -valueLength);\n                    return valueLength === range.text.length;\n                }\n                return true;\n            }\n        });\n        return InputView;\n        function buildOverflowHelper($input) {\n            return $(\"<span></span>\").css({\n                display:\"none\",\n\t\t\t\tposition: \"absolute\",\n                left: \"-9999px\",\n                visibility: \"hidden\",\n                whiteSpace: \"nowrap\",\n                fontFamily: $input.css(\"font-family\"),\n                fontSize: $input.css(\"font-size\"),\n                fontStyle: $input.css(\"font-style\"),\n                fontVariant: $input.css(\"font-variant\"),\n                fontWeight: $input.css(\"font-weight\"),\n                wordSpacing: $input.css(\"word-spacing\"),\n                letterSpacing: $input.css(\"letter-spacing\"),\n                textIndent: $input.css(\"text-indent\"),\n                textRendering: $input.css(\"text-rendering\"),\n                textTransform: $input.css(\"text-transform\")\n            }).insertAfter($input);\n        }\n        function compareQueries(a, b) {\n            a = (a || \"\").replace(/^\\s*/g, \"\").replace(/\\s{2,}/g, \" \").toLowerCase();\n            b = (b || \"\").replace(/^\\s*/g, \"\").replace(/\\s{2,}/g, \" \").toLowerCase();\n            return a === b;\n        }\n    }();\n    var DropdownView = function() {\n        function DropdownView(o) {\n            utils.bindAll(this);\n            this.isMouseOverDropdown;\n            this.$menu = $(o.menu).on(\"mouseenter\", this._handleMouseenter).on(\"mouseleave\", this._handleMouseleave).on(\"mouseover\", \".tt-suggestions > .tt-suggestion\", this._handleMouseover).on(\"click\", \".tt-suggestions > .tt-suggestion\", this._handleSelection);\n        }\n        utils.mixin(DropdownView.prototype, EventTarget, {\n            _handleMouseenter: function() {\n                this.isMouseOverDropdown = true;\n            },\n            _handleMouseleave: function() {\n                this.isMouseOverDropdown = false;\n            },\n            _handleMouseover: function($e) {\n                this._getSuggestions().removeClass(\"tt-is-under-cursor\");\n                $($e.currentTarget).addClass(\"tt-is-under-cursor\");\n            },\n            _handleSelection: function($e) {\n                this.trigger(\"select\", formatDataForSuggestion($($e.currentTarget)));\n            },\n            _moveCursor: function(increment) {\n                var $suggestions, $cur, nextIndex, $underCursor;\n                if (!this.$menu.hasClass(\"tt-is-open\")) {\n                    return;\n                }\n                $suggestions = this._getSuggestions();\n                $cur = $suggestions.filter(\".tt-is-under-cursor\");\n                $cur.removeClass(\"tt-is-under-cursor\");\n                nextIndex = $suggestions.index($cur) + increment;\n                nextIndex = (nextIndex + 1) % ($suggestions.length + 1) - 1;\n                if (nextIndex === -1) {\n                    this.trigger(\"cursorOff\");\n                    return;\n                } else if (nextIndex < -1) {\n                    nextIndex = $suggestions.length - 1;\n                }\n                $underCursor = $suggestions.eq(nextIndex).addClass(\"tt-is-under-cursor\");\n                this.trigger(\"cursorOn\", {\n                    value: $underCursor.data(\"value\")\n                });\n            },\n            _getSuggestions: function() {\n                return this.$menu.find(\".tt-suggestions > .tt-suggestion\");\n            },\n            hideUnlessMouseIsOverDropdown: function() {\n                if (!this.isMouseOverDropdown) {\n                    this.hide();\n                }\n            },\n            hide: function() {\n                if (this.$menu.hasClass(\"tt-is-open\")) {\n                    this.$menu.removeClass(\"tt-is-open\").find(\".tt-suggestions > .tt-suggestion\").removeClass(\"tt-is-under-cursor\");\n                    this.trigger(\"hide\");\n                }\n            },\n            show: function() {\n                if (!this.$menu.hasClass(\"tt-is-open\")) {\n                    this.$menu.addClass(\"tt-is-open\");\n                    this.trigger(\"show\");\n                }\n            },\n            isOpen: function() {\n                return this.$menu.hasClass(\"tt-is-open\");\n            },\n            moveCursorUp: function() {\n                this._moveCursor(-1);\n            },\n            moveCursorDown: function() {\n                this._moveCursor(+1);\n            },\n            getSuggestionUnderCursor: function() {\n                var $suggestion = this._getSuggestions().filter(\".tt-is-under-cursor\").first();\n                return $suggestion.length > 0 ? formatDataForSuggestion($suggestion) : null;\n            },\n            getFirstSuggestion: function() {\n                var $suggestion = this._getSuggestions().first();\n                return $suggestion.length > 0 ? formatDataForSuggestion($suggestion) : null;\n            },\n            renderSuggestions: function(query, dataset, suggestions) {\n                \n                var datasetClassName = \"tt-dataset-\" + dataset.name, $dataset = this.$menu.find(\".\" + datasetClassName), elBuilder, fragment, el;\n                if ($dataset.length === 0) {\n                    $dataset = $('<li><ol class=\"tt-suggestions\"></ol></li>').addClass(datasetClassName).appendTo(this.$menu);\n                }\n                elBuilder = document.createElement(\"div\");\n                fragment = document.createDocumentFragment();\n                this.clearSuggestions(dataset.name);\n                if (suggestions.length > 0) {\n                    this.$menu.removeClass(\"tt-is-empty\");\n                    utils.each(suggestions, function(i, suggestion) {\n                        elBuilder.innerHTML = dataset.template.render(suggestion);\n                        el = elBuilder.firstChild;\n                        el.setAttribute(\"data-value\", suggestion.value);\n                        fragment.appendChild(el);\n                    });\n                }\n                $dataset.find(\"> .tt-suggestions\").data({\n                    query: query,\n                    dataset: dataset.name,\n                    suggestions:suggestions[0]\n                }).append(fragment);\n                this.trigger(\"suggestionsRender\");\n            },\n            clearSuggestions: function(datasetName) {\n                var $suggestions = datasetName ? this.$menu.find(\".tt-dataset-\" + datasetName + \" .tt-suggestions\") : this.$menu.find(\".tt-suggestions\");\n                $suggestions.empty();\n                this._getSuggestions().length === 0 && this.$menu.addClass(\"tt-is-empty\");\n            }\n        });\n        return DropdownView;\n        function formatDataForSuggestion($suggestion) {\n            var $suggestions = $suggestion.parents(\".tt-suggestions\").first();\n            return {\n                value: $suggestion.data(\"value\"),\n                query: $suggestions.data(\"query\"),\n                dataset: $suggestions.data(\"dataset\"),\n                data:$suggestions.data(\"suggestions\")\n            };\n        }\n    }();\n    var TypeaheadView = function() {\n        var html = {\n            wrapper: '<span class=\"twitter-typeahead\"></span>',\n            hint: '<input style=\"display:none;\">',\n            dropdown: '<ol class=\"tt-dropdown-menu tt-is-empty\"></ol>'\n        };\n        function TypeaheadView(o) {\n            utils.bindAll(this);\n            this.$node = wrapInput(o.input);\n            this.datasets = o.datasets;\n            utils.each(this.datasets, function(key, dataset) {\n                var parentTemplate = '<li class=\"tt-suggestion\">%body</li>';\n                if (dataset.template) {\n                    dataset.template = dataset.engine.compile(parentTemplate.replace(\"%body\", dataset.template));\n                } else {\n                    dataset.template = {\n                        render: function(context) {\n                            return parentTemplate.replace(\"%body\", \"<p>\" + context.value + \"</p>\");\n                        }\n                    };\n                }\n            });\n            this.inputView = new InputView({\n                input: this.$node.find(\".tt-query\"),\n                hint: this.$node.find(\".tt-hint\")\n            });\n            this.dropdownView = new DropdownView({\n                menu: this.$node.find(\".tt-dropdown-menu\")\n            });\n            this.dropdownView.on(\"select\", this._handleSelection).on(\"cursorOn\", this._clearHint).on(\"cursorOn\", this._setInputValueToSuggestionUnderCursor).on(\"cursorOff\", this._setInputValueToQuery).on(\"cursorOff\", this._updateHint).on(\"suggestionsRender\", this._updateHint).on(\"show\", this._updateHint).on(\"hide\", this._clearHint);\n            this.inputView.on(\"focus\", this._showDropdown).on(\"blur\", this._hideDropdown).on(\"blur\", this._setInputValueToQuery).on(\"enter\", this._handleSelection).on(\"queryChange\", this._clearHint).on(\"queryChange\", this._clearSuggestions).on(\"queryChange\", this._getSuggestions).on(\"whitespaceChange\", this._updateHint).on(\"queryChange whitespaceChange\", this._showDropdown).on(\"queryChange whitespaceChange\", this._setLanguageDirection).on(\"esc\", this._hideDropdown).on(\"esc\", this._setInputValueToQuery).on(\"tab up down\", this._managePreventDefault).on(\"up down\", this._moveDropdownCursor).on(\"up down\", this._showDropdown).on(\"tab left right\", this._autocomplete);\n        }\n        utils.mixin(TypeaheadView.prototype, EventTarget, {\n            _managePreventDefault: function(e) {\n                var $e = e.data, hint, inputValue, preventDefault = false;\n                switch (e.type) {\n                  case \"tab\":\n                    hint = this.inputView.getHintValue();\n                    inputValue = this.inputView.getInputValue();\n                    preventDefault = hint && hint !== inputValue;\n                    break;\n\n                  case \"up\":\n                  case \"down\":\n                    preventDefault = !$e.shiftKey && !$e.ctrlKey && !$e.metaKey;\n                    break;\n                }\n                preventDefault && $e.preventDefault();\n            },\n            _setLanguageDirection: function() {\n                var dirClassName = \"tt-\" + this.inputView.getLanguageDirection();\n                if (!this.$node.hasClass(dirClassName)) {\n                    this.$node.removeClass(\"tt-ltr tt-rtl\").addClass(dirClassName);\n                }\n            },\n            _updateHint: function() {\n                var dataForFirstSuggestion = this.dropdownView.getFirstSuggestion(), hint = dataForFirstSuggestion ? dataForFirstSuggestion.value : null, inputValue, query, beginsWithQuery, match;\n                if (hint && this.dropdownView.isOpen() && !this.inputView.isOverflow()) {\n                    inputValue = this.inputView.getInputValue();\n                    query = inputValue.replace(/\\s{2,}/g, \" \").replace(/^\\s+/g, \"\");\n                    beginsWithQuery = new RegExp(\"^(?:\" + query + \")(.*$)\", \"i\");\n                    match = beginsWithQuery.exec(hint);\n                    this.inputView.setHintValue(inputValue + (match ? match[1] : \"\"));\n                }\n            },\n            _clearHint: function() {\n                this.inputView.setHintValue(\"\");\n            },\n            _clearSuggestions: function() {\n                this.dropdownView.clearSuggestions();\n            },\n            _setInputValueToQuery: function() {\n                this.inputView.setInputValue(this.inputView.getQuery());\n            },\n            _setInputValueToSuggestionUnderCursor: function(e) {\n                var suggestion = e.data;\n                this.inputView.setInputValue(suggestion.value, true);\n            },\n            _showDropdown: function() {\n                this.dropdownView.show();\n            },\n            _hideDropdown: function(e) {\n                this.dropdownView[e.type === \"blur\" ? \"hideUnlessMouseIsOverDropdown\" : \"hide\"]();\n            },\n            _moveDropdownCursor: function(e) {\n                var $e = e.data;\n                if (!$e.shiftKey && !$e.ctrlKey && !$e.metaKey) {\n                    this.dropdownView[e.type === \"up\" ? \"moveCursorUp\" : \"moveCursorDown\"]();\n                }\n            },\n            _handleSelection: function(e) {\n                var byClick = e.type === \"select\", suggestionData = byClick ? e.data : this.dropdownView.getSuggestionUnderCursor();\n                if (suggestionData) {\n                    this.inputView.setInputValue(suggestionData.value);\n                    byClick ? this.inputView.focus() : e.data.preventDefault();\n                    byClick && utils.isMsie() ? setTimeout(this.dropdownView.hide, 0) : this.dropdownView.hide();\n                    console.log(suggestionData);\n                }\n            },\n            _getSuggestions: function() {\n                var that = this, query = this.inputView.getQuery();\n                utils.each(this.datasets, function(i, dataset) {\n                    dataset.getSuggestions(query, function(suggestions) {\n                        that._renderSuggestions(query, dataset, suggestions);\n                    });\n                });\n            },\n            _renderSuggestions: function(query, dataset, suggestions) {\n                if (query !== this.inputView.getQuery()) {\n                    return;\n                }\n                suggestions = suggestions.slice(0, dataset.limit);\n                this.dropdownView.renderSuggestions(query, dataset, suggestions);\n            },\n            _autocomplete: function(e) {\n                var isCursorAtEnd, ignoreEvent, query, hint;\n                if (e.type === \"right\" || e.type === \"left\") {\n                    isCursorAtEnd = this.inputView.isCursorAtEnd();\n                    ignoreEvent = this.inputView.getLanguageDirection() === \"ltr\" ? e.type === \"left\" : e.type === \"right\";\n                    if (!isCursorAtEnd || ignoreEvent) {\n                        return;\n                    }\n                }\n                query = this.inputView.getQuery();\n                hint = this.inputView.getHintValue();\n                if (hint !== \"\" && query !== hint) {\n                    this.inputView.setInputValue(hint);\n                }\n            }\n        });\n        return TypeaheadView;\n        function wrapInput(input) {\n            var $input = $(input), $hint = $(html.hint).css({\n                \"background-color\": $input.css(\"background-color\")\n            });\n            if ($input.length === 0) {\n                return null;\n            }\n            try {\n                !$input.attr(\"dir\") && $input.attr(\"dir\", \"auto\");\n            } catch (e) {}\n            return $input.attr({\n                autocomplete: \"off\",\n                spellcheck: false\n            }).addClass(\"tt-query\").wrap(html.wrapper).parent().prepend($hint).append(html.dropdown);\n        }\n    }();\n    (function() {\n        var initializedDatasets = {}, transportOptions = {}, transport, methods;\n        jQuery.fn.typeahead = typeahead;\n        typeahead.configureTransport = configureTransport;\n\t\tmethods = {\n            initialize: function(datasetDefs) {\n                var datasets = {};\n                datasetDefs = utils.isArray(datasetDefs) ? datasetDefs : [ datasetDefs ];\n                if (datasetDefs.length === 0) {\n                    throw new Error(\"no datasets provided\");\n                }\n                delete typeahead.configureTransport;\n                transport = transport || new Transport(transportOptions);\n                utils.each(datasetDefs, function(i, datasetDef) {\n                    var dataset, name = datasetDef.name = datasetDef.name || utils.getUniqueId();\n                    if (initializedDatasets[name]) {\n                        dataset = initializedDatasets[name];\n                    } else {\n                        datasetDef.limit = datasetDef.limit || 5;\n                        datasetDef.template = datasetDef.template;\n                        datasetDef.engine = datasetDef.engine;\n                        if (datasetDef.template && !datasetDef.engine) {\n                            throw new Error(\"no template engine specified for \" + name);\n                        }\n                        dataset = initializedDatasets[name] = new Dataset({\n                            name: datasetDef.name,\n                            limit: datasetDef.limit,\n                            local: datasetDef.local,\n                            prefetch: datasetDef.prefetch,\n                            ttl_ms: datasetDef.ttl_ms,\n                            remote: datasetDef.remote,\n                            matcher: datasetDef.matcher,\n                            ranker: datasetDef.ranker,\n                            transport: transport\n                        });\n                    }\n                    datasets[name] = {\n                        name: datasetDef.name,\n                        limit: datasetDef.limit,\n                        template: datasetDef.template,\n                        engine: datasetDef.engine,\n                        getSuggestions: dataset.getSuggestions\n                    };\n                });\n                return this.each(function() {\n                    $(this).data({\n                        typeahead: new TypeaheadView({\n                            input: this,\n                            datasets: datasets\n                        })\n                    });\n                });\n            }\n        };\n        function typeahead(method) {\n            if (methods[method]) {\n                return methods[method].apply(this, [].slice.call(arguments, 1));\n            } else {\n                return methods.initialize.apply(this, arguments);\n            }\n        }\n        function configureTransport(o) {\n            transportOptions = o;\n        }\n    })();\n})();\n});"]],"start1":0,"start2":0,"length1":0,"length2":42525}]],"length":42525}
{"contributors":[],"silentsave":false,"ts":1362030784465,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(suggestionData);"],[1,"//create an event here"],[0,"\n   "]],"start1":37379,"start2":37379,"length1":36,"length2":30}]],"length":42519,"saved":false}
{"ts":1362031039137,"patch":[[{"diffs":[[0,"nt here\n"],[1,"                    var myEvent = new CustomEvent(\"userLogin\", {\n                        detail: {\n                            returnData: suggestionData.data\n                        }\n                    });\n                    \n                    // Trigger it!\n                    myElement.dispatchEvent(myEvent);\n"],[0,"        "]],"start1":37398,"start2":37398,"length1":16,"length2":335}]],"length":42838,"saved":false}
{"ts":1362031055512,"patch":[[{"diffs":[[0,"ent("],[-1,"\"userLogin\""],[1,"suggestionData.data.target"],[0,", {\n"]],"start1":37452,"start2":37452,"length1":19,"length2":34}]],"length":42853,"saved":false}
{"ts":1362031099121,"patch":[[{"diffs":[[0,"a.data.t"],[-1,"arget"],[1,"ype"],[0,", {\n    "]],"start1":37469,"start2":37469,"length1":21,"length2":19},{"diffs":[[0,"    "],[-1,"myElement"],[1,"document.getElementById(suggestionData.)"],[0,".dis"]],"start1":37700,"start2":37700,"length1":17,"length2":48}]],"length":42882,"saved":false}
{"ts":1362031108884,"patch":[[{"diffs":[[0,"ionData."],[1,"data.target"],[0,").dispat"]],"start1":37735,"start2":37735,"length1":16,"length2":27}]],"length":42893,"saved":false}
{"ts":1362031115113,"patch":[[{"diffs":[[0,"});\n"],[-1,"                    \n"],[0,"    "]],"start1":37624,"start2":37624,"length1":29,"length2":8}]],"length":42872,"saved":false}
{"ts":1362031311271,"patch":[[{"diffs":[[0,"ta.data."],[1,"callback."],[0,"target)."]],"start1":37719,"start2":37719,"length1":16,"length2":25}]],"length":42881,"saved":false}
{"ts":1362031317271,"patch":[[{"diffs":[[0,"ta.data."],[1,"callback."],[0,"type, {\n"]],"start1":37468,"start2":37468,"length1":16,"length2":25}]],"length":42890,"saved":false}
{"ts":1362032807172,"patch":[[{"diffs":[[0,"nt here\n"],[1,"                    console.log(sugges)\n"],[0,"        "]],"start1":37398,"start2":37398,"length1":16,"length2":56},{"diffs":[[0,"yEvent ="],[-1," new"],[0," CustomE"]],"start1":37471,"start2":37471,"length1":20,"length2":16}]],"length":42926,"saved":false}
{"ts":1362032814118,"patch":[[{"diffs":[[0,"g(sugges"],[-1,")"],[1,"tionData);"],[0,"\n       "]],"start1":37436,"start2":37436,"length1":17,"length2":26}]],"length":42935,"saved":false}
{"ts":1362032919622,"patch":[[{"diffs":[[0,"              }\n"],[1,"                console.log(suggestions);\n"],[0,"                "]],"start1":30655,"start2":30655,"length1":32,"length2":74}]],"length":42977,"saved":false}
{"ts":1362032953903,"patch":[[{"diffs":[[0,"gestions"],[-1,"[0]"],[0,"\n       "]],"start1":30883,"start2":30883,"length1":19,"length2":16}]],"length":42974,"saved":false}
{"ts":1362032990807,"patch":[[{"diffs":[[0,"            "],[1,"/*"],[0,"var myEvent "]],"start1":37502,"start2":37502,"length1":24,"length2":26},{"diffs":[[0,"             });"],[1,"*/"],[0,"\n               "]],"start1":37706,"start2":37706,"length1":32,"length2":34}]],"length":42978,"saved":false}
{"ts":1362037301258,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"document"]],"start1":37772,"start2":37772,"length1":16,"length2":18}]],"length":42980,"saved":false}
{"ts":1362037405944,"patch":[[{"diffs":[[0,"        "],[-1,"/*"],[0,"var myEv"]],"start1":37506,"start2":37506,"length1":18,"length2":16},{"diffs":[[0,"     });"],[-1,"*/"],[0,"\n       "]],"start1":37712,"start2":37712,"length1":18,"length2":16},{"diffs":[[0,"      //"],[-1," "],[0,"Trigger "]],"start1":37735,"start2":37735,"length1":17,"length2":16},{"diffs":[[0,"        "],[-1,"//"],[0,"document"]],"start1":37767,"start2":37767,"length1":18,"length2":16}]],"length":42973,"saved":false}
{"ts":1362037422937,"patch":[[{"diffs":[[0,"gestionData.data"],[1,"[0]"],[0,".callback.type, "]],"start1":37543,"start2":37543,"length1":32,"length2":35}]],"length":42976,"saved":false}
{"ts":1362037430139,"patch":[[{"diffs":[[0,"tionData"],[-1,".data"],[0,"\n       "]],"start1":37660,"start2":37660,"length1":21,"length2":16}]],"length":42971,"saved":false}
{"ts":1362037438284,"patch":[[{"diffs":[[0,"ata.data"],[1,"[0]"],[0,".callbac"]],"start1":37808,"start2":37808,"length1":16,"length2":19}]],"length":42974,"saved":false}
{"ts":1362037970067,"patch":[[{"diffs":[[0,"  }\n"],[-1,"                console.log(suggestions);\n"],[0,"    "]],"start1":30667,"start2":30667,"length1":50,"length2":8},{"diffs":[[0,"ere\n"],[-1,"                    console.log(suggestionData);\n"],[0,"    "]],"start1":37399,"start2":37399,"length1":57,"length2":8}]],"length":42883,"saved":false}
