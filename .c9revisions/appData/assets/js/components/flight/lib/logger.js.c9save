{"ts":1361965251127,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// ==========================================\n// Copyright 2013 Twitter, Inc\n// Licensed under The MIT License\n// http://opensource.org/licenses/MIT\n// ==========================================\n\n\"use strict\";\n\ndefine(\n\n  [\n    './compose',\n    './utils'\n  ],\n\n  function (compose, util) {\n\n    var actionSymbols = {\n      on:'<-',\n      trigger: '->',\n      off: 'x '\n    };\n\n    function elemToString(elem) {\n      var tagStr = elem.tagName ? elem.tagName.toLowerCase() : elem.toString();\n      var classStr = elem.className ? \".\" + (elem.className) : \"\";\n      var result = tagStr + classStr;\n      return elem.tagName ? ['\\'', '\\''].join(result) : result;\n    }\n\n    function log(action, component, eventArgs) {\n\n      var name, elem, fn, fnName, logFilter, toRegExp, actionLoggable, nameLoggable;\n\n      if (typeof eventArgs[eventArgs.length-1] == 'function') {\n        fn = eventArgs.pop();\n        fn = fn.unbound || fn; //use unbound version if any (better info)\n      }\n\n      if (typeof eventArgs[eventArgs.length - 1] == 'object') {\n        eventArgs.pop(); //trigger data arg - not logged right now\n      }\n\n      if (eventArgs.length == 2) {\n        elem = eventArgs[0];\n        name = eventArgs[1];\n      } else {\n        elem = component.$node[0];\n        name = eventArgs[0];\n      }\n\n      if (window.DEBUG) {\n        logFilter = DEBUG.events.logFilter;\n\n        // no regex for you, actions...\n        actionLoggable = logFilter.actions==\"all\" || (logFilter.actions.indexOf(action) > -1);\n        // event name filter allow wildcards or regex...\n        toRegExp = function(expr) {\n          return expr.test ? expr : new RegExp(\"^\" + expr.replace(/\\*/g, \".*\") + \"$\");\n        };\n        nameLoggable =\n          logFilter.eventNames==\"all\" ||\n          logFilter.eventNames.some(function(e) {return toRegExp(e).test(name)});\n\n        if (actionLoggable && nameLoggable) {\n          console.info(\n            actionSymbols[action],\n            action,\n            '[' + name + ']',\n            elemToString(elem),\n            component.constructor.describe,\n            fn && (fnName = fn.name || fn.displayName) && '->  ' + fnName\n          );\n        }\n      }\n    }\n\n\n    function withLogging() {\n      this.before('trigger', function() {\n        log('trigger', this, util.toArray(arguments));\n      });\n      this.before('on', function() {\n        log('on', this, util.toArray(arguments));\n      });\n      this.before('off', function(eventArgs) {\n        log('off', this, util.toArray(arguments));\n      });\n    }\n\n    return withLogging;\n  }\n);\n"]],"start1":0,"start2":0,"length1":0,"length2":2568}]],"length":2568}
