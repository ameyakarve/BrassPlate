{"ts":1361965247509,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// ==========================================\n// Copyright 2013 Twitter, Inc\n// Licensed under The MIT License\n// http://opensource.org/licenses/MIT\n// ==========================================\n\n\"use strict\";\n\ndefine(\n\n  [\n    './utils'\n  ],\n\n  function (util) {\n\n    function parseEventArgs(instance, args) {\n      var element, type, callback;\n\n      args = util.toArray(args);\n\n      if (typeof args[args.length-1] === 'function') {\n        callback = args.pop();\n      }\n\n      if (typeof args[args.length-1] === 'object') {\n        args.pop();\n      }\n\n      if (args.length == 2) {\n        element = args[0];\n        type = args[1];\n      } else {\n        element = instance.node;\n        type = args[0];\n      }\n\n      return {\n        element: element,\n        type: type,\n        callback: callback\n      };\n    }\n\n    function matchEvent(a, b) {\n      return (\n        (a.element == b.element) &&\n        (a.type == b.type) &&\n        (b.callback == null || (a.callback == b.callback))\n      );\n    }\n\n    function Registry() {\n\n      var registry = this;\n\n      (this.reset = function() {\n        this.components = [];\n        this.allInstances = [];\n        this.events = [];\n      }).call(this);\n\n      function ComponentInfo(component) {\n        this.component = component;\n        this.instances = [];\n\n        this.addInstance = function(instance) {\n          this.throwIfInstanceExistsOnNode(instance);\n\n          var instanceInfo = new InstanceInfo(instance);\n          this.instances.push(instanceInfo);\n\n          return instanceInfo;\n        }\n\n        this.throwIfInstanceExistsOnNode = function(instance) {\n          this.instances.forEach(function (instanceInfo) {\n            if (instanceInfo.instance.$node[0] === instance.$node[0]) {\n              throw new Error('Instance of ' + instance.constructor + ' already exists on node ' + instance.$node[0]);\n            }\n          });\n        }\n\n        this.removeInstance = function(instance) {\n          var instanceInfo = this.instances.filter(function(instanceInfo) {\n            return instanceInfo.instance == instance;\n          })[0];\n\n          var index = this.instances.indexOf(instanceInfo);\n\n          (index > -1)  && this.instances.splice(index, 1);\n\n          if (!this.instances.length) {\n            //if I hold no more instances remove me from registry\n            registry.removeComponentInfo(this);\n          }\n        }\n      }\n\n      function InstanceInfo(instance) {\n        this.instance = instance;\n        this.events = [];\n\n        this.addTrigger = function() {};\n\n        this.addBind = function(event) {\n          this.events.push(event);\n          registry.events.push(event);\n        };\n\n        this.removeBind = function(event) {\n          for (var i = 0, e; e = this.events[i]; i++) {\n            if (matchEvent(e, event)) {\n              this.events.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      this.addInstance = function(instance) {\n        var component = this.findComponentInfo(instance);\n\n        if (!component) {\n          component = new ComponentInfo(instance.constructor);\n          this.components.push(component);\n        }\n\n        var inst = component.addInstance(instance);\n\n        this.allInstances.push(inst);\n\n        return component;\n      };\n\n      this.removeInstance = function(instance) {\n        var index, instInfo = this.findInstanceInfo(instance);\n\n        //remove from component info\n        var componentInfo = this.findComponentInfo(instance);\n        componentInfo.removeInstance(instance);\n\n        //remove from registry\n        var index = this.allInstances.indexOf(instInfo);\n        (index > -1)  && this.allInstances.splice(index, 1);\n      };\n\n      this.removeComponentInfo = function(componentInfo) {\n        var index = this.components.indexOf(componentInfo);\n        (index > -1)  && this.components.splice(index, 1);\n      };\n\n      this.findComponentInfo = function(which) {\n        var component = which.attachTo ? which : which.constructor;\n\n        for (var i = 0, c; c = this.components[i]; i++) {\n          if (c.component === component) {\n            return c;\n          }\n        }\n\n        return null;\n      };\n\n      this.findInstanceInfo = function(which) {\n        var testFn;\n\n        if (which.node) {\n          //by instance (returns matched instance)\n          testFn = function(inst) {return inst.instance === which};\n        } else {\n          //by node (returns array of matches)\n          testFn = function(inst) {return inst.instance.node === which};\n        }\n\n        var matches = this.allInstances.filter(testFn);\n        if (!matches.length) {\n          return which.node ? null : [];\n        }\n        return which.node ? matches[0] : matches;\n      };\n\n      this.trigger = function() {\n        var event = parseEventArgs(this, arguments),\n            instance = registry.findInstanceInfo(this);\n\n        if (instance) {\n          instance.addTrigger(event);\n        }\n      };\n\n      this.on = function(componentOn) {\n        var otherArgs = util.toArray(arguments, 1);\n        var instance = registry.findInstanceInfo(this);\n        var boundCallback;\n\n        if (instance) {\n          boundCallback = componentOn.apply(null, otherArgs);\n          if(boundCallback) {\n            otherArgs[otherArgs.length-1] = boundCallback;\n          }\n          var event = parseEventArgs(this, otherArgs);\n          instance.addBind(event);\n        }\n      };\n\n      this.off = function(el, type, callback) {\n        var event = parseEventArgs(this, arguments),\n            instance = registry.findInstanceInfo(this);\n\n        if (instance) {\n          instance.removeBind(event);\n        }\n      };\n\n      this.teardown = function() {\n        registry.removeInstance(this);\n      };\n\n      this.withRegistration = function() {\n        this.before('initialize', function() {\n          registry.addInstance(this);\n        });\n\n        this.after('trigger', registry.trigger);\n        this.around('on', registry.on);\n        this.after('off', registry.off);\n        this.after('teardown', {obj:registry, fnName:'teardown'});\n      };\n\n    }\n\n    return new Registry;\n  }\n);\n"]],"start1":0,"start2":0,"length1":0,"length2":6169}]],"length":6169}
