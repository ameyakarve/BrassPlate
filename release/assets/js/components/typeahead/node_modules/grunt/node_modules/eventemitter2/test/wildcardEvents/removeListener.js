var simpleEvents=require("nodeunit").testCase,file="../../lib/eventemitter2",EventEmitter2;EventEmitter2="undefined"!=typeof require?require(file).EventEmitter2:window.EventEmitter2,module.exports=simpleEvents({"1. add a single event and then remove the event.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")};n.on(r,i),t=n.listeners(r),e.equal(t.length,1,"should only have 1"),n.removeListener(r,i),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(2),e.done()},"2. Add two events and then remove only one of those events.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function i(){e.ok(!0,"event was raised")};n.on(r,i),n.on(r,i),t=n.listeners(r),e.equal(t.length,2,"should only have 2"),n.removeListener(r,i),t=n.listeners(r),e.equal(t.length,1,"should be 1"),e.expect(2),e.done()},"3. Add three events and remove only one of the events that was added.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")};n.on(r,i),n.on(r,i),n.on(r,i),t=n.listeners(r),e.equal(t.length,3,"should only have 3"),n.removeListener(r,i),t=n.listeners(r),e.equal(t.length,2,"should be 2"),e.expect(2),e.done()},"4. Should error if we don't pass a function to the emit method.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")};n.on(r,i),t=n.listeners(r),e.equal(t.length,1,"should only have 1"),e.throws(function(){n.removeListener(r,r)},Error,"should throw an Error"),t=n.listeners(r),e.equal(t.length,1,"should be 1"),e.expect(3),e.done()},"5. Removing one listener should not affect another listener.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")},o=function(){e.ok(!0,"event was raised")};n.on(r,i),t=n.listeners(r),e.equal(t.length,1,"should only have 1"),n.removeListener(r,o),t=n.listeners(r),e.equal(t.length,1,"should be 1"),e.expect(2),e.done()},"6. Remove all listener functions.":function(e){for(var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")},o=0;10>o;o++)n.on(r,i);t=n.listeners(r),e.equal(t.length,10,"should only have 10"),n.removeListener(r,i),t=n.listeners(r),e.equal(t.length,9,"should be 9"),n.removeAllListeners(r),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(3),e.done()},"7. Removing listeners for one event should not affect another event's listeners.":function(e){for(var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="remove.foo.bar",i=function(){e.ok(!0,"event was raised")},o=0;10>o;o++)n.on(r,i);t=n.listeners(r),e.equal(t.length,10,"should only have 10"),n.removeListener(r+r,i),t=n.listeners(r),e.equal(t.length,10,"should be 10"),n.removeAllListeners(r+r),t=n.listeners(r),e.equal(t.length,10,"should be 10"),n.removeAllListeners(r+"."+r),t=n.listeners(r),e.equal(t.length,10,"should be 10"),n.removeAllListeners(r),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(5),e.done()},"8. Its ok to listen on wildcard, so it is ok to remove it.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="*.wild.card",i="just.another.event",o=function(){e.ok(!0,"event was raised")};n.on(i,o),n.on(r,o),n.removeListener(r,o),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(1),e.done()},"9. And (8) should not depend on order of listening.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="*.wild.card",i="just.another.event",o=function(){e.ok(!0,"event was raised")};n.on(r,o),n.on(i,o),n.removeListener(r,o),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(1),e.done()},"10. Reporting many listeners on wildcard all should removed.":function(e){var t,n=new EventEmitter2({wildcard:!0,verbose:!0}),r="*.wild.card",i="exact.wild.card",o=function(){e.ok(!0,"event was raised")};n.on(r,o),n.on(i,o),t=n.listeners(r),e.equal(t.length,2,"should only have 2"),n.removeListener(r,o),t=n.listeners(r),e.equal(t.length,0,"should be 0"),e.expect(2),e.done()}});