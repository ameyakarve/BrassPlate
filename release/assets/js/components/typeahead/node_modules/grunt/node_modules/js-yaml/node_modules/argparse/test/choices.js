var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("choices",function(){var e,t;it("should store correct choice(choices defined as string)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo"],{choices:"abc"}),t=e.parseArgs("--foo a".split(" ")),assert.equal(t.foo,"a")}),it("should drop down with 'Invalid choice' error for incorrect choices(choices defined as string)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo"],{choices:"abc"}),assert.throws(function(){t=e.parseArgs("--foo e".split(" ")),console.dir(t)},/Invalid choice:/),assert.throws(function(){t=e.parseArgs("--foo 0".split(" ")),console.dir(t)},/Invalid choice:/)}),it("should store correct choice(choices defined as array)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo"],{choices:["a","abc","d"]}),t=e.parseArgs("--foo abc".split(" ")),assert.equal(t.foo,"abc")}),it("should drop down with 'Invalid choice' error for incorrect choices(choices defined as array)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo"],{choices:["a","abc","d"]}),assert.throws(function(){t=e.parseArgs("--foo e".split(" ")),console.dir(t)},/Invalid choice:/),assert.throws(function(){t=e.parseArgs("--foo 0".split(" ")),console.dir(t)},/Invalid choice:/)})});