function monkeyPatch(){Object.defineProperty(Array.prototype,"abbrev",{value:function(){return abbrev(this)},enumerable:!1,configurable:!0,writable:!0}),Object.defineProperty(Object.prototype,"abbrev",{value:function(){return abbrev(Object.keys(this))},enumerable:!1,configurable:!0,writable:!0})}function abbrev(e){1===arguments.length&&Array.isArray(e)||(e=Array.prototype.slice.call(arguments,0));for(var t=0,n=e.length,r=[];n>t;t++)r[t]="string"==typeof e[t]?e[t]:e[t]+"";r=r.sort(lexSort);for(var i={},o="",t=0,n=r.length;n>t;t++){var a=r[t],s=r[t+1]||"",u=!0,l=!0;if(a!==s){for(var c=0,f=a.length;f>c;c++){var p=a.charAt(c);if(u=u&&p===s.charAt(c),l=l&&p===o.charAt(c),!u&&!l){c++;break}}if(o=a,c!==f)for(var d=a.substr(0,c);f>=c;c++)i[d]=a,d+=a.charAt(c);else i[a]=a}}return i}function lexSort(e,t){return e===t?0:e>t?1:-1}function test(e,t){var n=abbrev(e);assert.deepEqual(n,t,"abbrev("+util.inspect(e)+") === "+util.inspect(t)+"\n"+"actual: "+util.inspect(n)),n=abbrev.apply(exports,e),assert.deepEqual(abbrev.apply(exports,e),t,"abbrev("+e.map(JSON.stringify).join(",")+") === "+util.inspect(t)+"\n"+"actual: "+util.inspect(n))}if(module.exports=exports=abbrev.abbrev=abbrev,abbrev.monkeyPatch=monkeyPatch,module===require.main){var assert=require("assert"),util=require("util");console.log("running tests"),test(["ruby","ruby","rules","rules","rules"],{rub:"ruby",ruby:"ruby",rul:"rules",rule:"rules",rules:"rules"}),test(["fool","foom","pool","pope"],{fool:"fool",foom:"foom",poo:"pool",pool:"pool",pop:"pope",pope:"pope"}),test(["a","ab","abc","abcd","abcde","acde"],{a:"a",ab:"ab",abc:"abc",abcd:"abcd",abcde:"abcde",ac:"acde",acd:"acde",acde:"acde"}),console.log("pass")}