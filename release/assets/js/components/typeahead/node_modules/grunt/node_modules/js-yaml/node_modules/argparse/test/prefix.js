var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("prefix",function(){var e,t;it("test an Optional with option strings with custom prefixes",function(){e=new ArgumentParser({addHelp:!1,prefixChars:"+:/",debug:!0}),e.addArgument(["+f"],{action:"storeTrue"}),e.addArgument(["::bar"],{}),e.addArgument(["/baz"],{action:"storeConst","const":42,constant:42}),t=e.parseArgs([]),assert.deepEqual(t,{bar:null,baz:null,f:!1}),t=e.parseArgs(["+f"]),assert.deepEqual(t,{bar:null,baz:null,f:!0}),t=e.parseArgs(["::ba","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!1}),t=e.parseArgs(["+f","::bar","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!0}),t=e.parseArgs(["+f","/b"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),t=e.parseArgs(["/ba","+f"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),assert.throws(function(){t=e.parseArgs(["--bar"])}),assert.throws(function(){t=e.parseArgs(["-fbar"])}),assert.throws(function(){t=e.parseArgs(["-b","B"])}),assert.throws(function(){t=e.parseArgs(["B"])}),assert.throws(function(){t=e.parseArgs(["-f"])}),assert.throws(function(){t=e.parseArgs(["--bar","B"])}),assert.throws(function(){t=e.parseArgs(["-baz"])}),assert.throws(function(){t=e.parseArgs(["-h"])}),assert.throws(function(){t=e.parseArgs(["--help"])}),assert.throws(function(){t=e.parseArgs(["+h"])}),assert.throws(function(){t=e.parseArgs(["::help"])}),assert.throws(function(){t=e.parseArgs(["/help"])})}),it('when "-" not in prefix_chars, default operators created for help should use the prefix_chars in use rather than - or --',function(){e=new ArgumentParser({addHelp:!0,prefixChars:"+:/",debug:!0}),e.addArgument(["+f"],{action:"storeTrue"}),e.addArgument(["::bar"],{}),e.addArgument(["/baz"],{action:"storeConst","const":42,constant:42}),t=e.parseArgs([]),assert.deepEqual(t,{bar:null,baz:null,f:!1}),t=e.parseArgs(["+f"]),assert.deepEqual(t,{bar:null,baz:null,f:!0}),t=e.parseArgs(["::ba","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!1}),t=e.parseArgs(["+f","::bar","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!0}),t=e.parseArgs(["+f","/b"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),t=e.parseArgs(["/ba","+f"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),assert.throws(function(){t=e.parseArgs(["--bar"])}),assert.throws(function(){t=e.parseArgs(["-fbar"])}),assert.throws(function(){t=e.parseArgs(["-b","B"])}),assert.throws(function(){t=e.parseArgs(["B"])}),assert.throws(function(){t=e.parseArgs(["-f"])}),assert.throws(function(){t=e.parseArgs(["--bar","B"])}),assert.throws(function(){t=e.parseArgs(["-baz"])})}),it("verify that Optionals must be called with their defined prefixes",function(){e=new ArgumentParser({addHelp:!1,prefixChars:"+-",debug:!0}),e.addArgument(["-x"],{action:"storeTrue"}),e.addArgument(["+y"],{action:"storeTrue"}),e.addArgument(["+z"],{action:"storeTrue"}),t=e.parseArgs([]),assert.deepEqual(t,{y:!1,x:!1,z:!1}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{y:!1,x:!0,z:!1}),t=e.parseArgs(["+y","-x"]),assert.deepEqual(t,{y:!0,x:!0,z:!1}),t=e.parseArgs(["+yz","-x"]),assert.deepEqual(t,{y:!0,x:!0,z:!0}),assert.throws(function(){t=e.parseArgs(["-w"])}),assert.throws(function(){t=e.parseArgs(["-xyz"])}),assert.throws(function(){t=e.parseArgs(["+x"])}),assert.throws(function(){t=e.parseArgs(["-y"])}),assert.throws(function(){t=e.parseArgs(["+xyz"])})}),it("test when one double-dash option string is a prefix of another",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--badger"],{action:"storeTrue"}),e.addArgument(["--ba"],{}),t=e.parseArgs([]),assert.deepEqual(t,{ba:null,badger:!1}),t=e.parseArgs(["--ba","X"]),assert.deepEqual(t,{ba:"X",badger:!1}),t=e.parseArgs(["--ba=X"]),assert.deepEqual(t,{ba:"X",badger:!1}),t=e.parseArgs(["--bad"]),assert.deepEqual(t,{ba:null,badger:!0}),t=e.parseArgs(["--badg"]),assert.deepEqual(t,{ba:null,badger:!0}),t=e.parseArgs(["--badge"]),assert.deepEqual(t,{ba:null,badger:!0}),t=e.parseArgs(["--badger"]),assert.deepEqual(t,{ba:null,badger:!0}),assert.throws(function(){t=e.parseArgs(["--bar"])}),assert.throws(function(){t=e.parseArgs(["--b"])}),assert.throws(function(){t=e.parseArgs(["--ba"])}),assert.throws(function(){t=e.parseArgs(["--b=2"])}),assert.throws(function(){t=e.parseArgs(["--badge","5"])})}),it("test arguments from prefix chars only",function(){e=new ArgumentParser({prefixChars:"-+",debug:!0}),e.addArgument(["-"],{dest:"x","const":"badger",nargs:"?",constant:"badger"}),e.addArgument(["+"],{"default":42,dest:"y",type:"int",defaultValue:42}),e.addArgument(["-+-"],{action:"storeTrue",dest:"z"}),t=e.parseArgs([]),assert.deepEqual(t,{y:42,x:null,z:!1}),t=e.parseArgs(["-"]),assert.deepEqual(t,{y:42,x:"badger",z:!1}),t=e.parseArgs(["-","X"]),assert.deepEqual(t,{y:42,x:"X",z:!1}),t=e.parseArgs(["+","-3"]),assert.deepEqual(t,{y:-3,x:null,z:!1}),t=e.parseArgs(["-+-"]),assert.deepEqual(t,{y:42,x:null,z:!0}),t=e.parseArgs(["-","==="]),assert.deepEqual(t,{y:42,x:"===",z:!1}),assert.throws(function(){t=e.parseArgs(["-y"])}),assert.throws(function(){t=e.parseArgs(["+","-"])})})});