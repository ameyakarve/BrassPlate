var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("Argument conflict handling",function(){var e,t;it("test_bad_type",function(){assert.throws(function(){e=new ArgumentParser({conflictHandler:"foo"})},/invalid conflict resolution value: foo/i)}),it("test_conflict_error",function(){e=new ArgumentParser,e.addArgument(["-x"]),assert.throws(function(){e.addArgument(["-x"])},/Conflicting option string/i),e.addArgument(["--spam"]),assert.throws(function(){e.addArgument(["--spam"])},/Conflicting option string/i)}),it("test_resolve_error",function(){e=new ArgumentParser({prog:"PROG",conflictHandler:"resolve"}),e.addArgument(["-x"],{help:"OLD X"}),e.addArgument(["-x"],{help:"NEW X"}),t=e.formatHelp(),assert(t.match(/usage: PROG \[-h\] \[-x X\]/im)),assert(t.match(/Show this help message and exit/im)),assert(t.match(/-x X\s*NEW X/im)),e.addArgument(["--spam"],{metavar:"OLD_SPAM"}),e.addArgument(["--spam"],{metavar:"NEW_SPAM"}),t=e.formatHelp(),assert(t.match(/--spam NEW_SPAM/im))}),it("TypeError with multiple conflicts",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["-b","--bar"]),assert.throws(function(){e.addArgument(["--foo","--bar","--foobar"])},/argument "--foo\/--bar\/--foobar": Conflicting option string\(s\): --foo, --bar/)}),it("resolving multiple conflicts",function(){e=new ArgumentParser({debug:!0,conflictHandler:"resolve"}),e.addArgument(["-f","--foo"]),e.addArgument(["--bar"]),t=e.formatHelp(),assert(t.match(/-f FOO, --foo FOO/im)),e.addArgument(["--foo","--bar","--foobar"]),t=e.formatHelp(),assert(t.match(/-f FOO$/im)),assert(t.match(/--foo FOO, --bar FOO, --foobar FOO/im))})});