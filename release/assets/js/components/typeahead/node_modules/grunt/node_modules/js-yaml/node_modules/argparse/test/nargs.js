var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser,$$=require("../lib/const");describe("nargs",function(){var e,t;it("test specifying the 1 arg for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{nargs:1}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{x:["a"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x"])})}),it("test specifying the 3 args for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{nargs:3}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-x","a","b","c"]),assert.deepEqual(t,{x:["a","b","c"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["-x","a"])}),assert.throws(function(){t=e.parseArgs(["-x","a","b"])}),assert.throws(function(){t=e.parseArgs(["a","-x"])}),assert.throws(function(){t=e.parseArgs(["a","-x","b"])})}),it("tests not specifying the number of args for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{x:"a"}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x"])})}),it("test specifying an args for an Optional, that accepts one or more",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{nargs:"+"}),e.addArgument(["-y"],{"default":"spam",nargs:"+",defaultValue:"spam"}),t=e.parseArgs([]),assert.deepEqual(t,{y:"spam",x:null}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{y:"spam",x:["a"]}),t=e.parseArgs(["-x","a","b"]),assert.deepEqual(t,{y:"spam",x:["a","b"]}),t=e.parseArgs(["-y","a"]),assert.deepEqual(t,{y:["a"],x:null}),t=e.parseArgs(["-y","a","b"]),assert.deepEqual(t,{y:["a","b"],x:null}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["-y"])}),assert.throws(function(){t=e.parseArgs(["a","-x"])}),assert.throws(function(){t=e.parseArgs(["a","-y","b"])})}),it("test specifying an Optional arg for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-w"],{nargs:"?"}),e.addArgument(["-x"],{"const":42,nargs:"?",constant:42}),e.addArgument(["-y"],{"default":"spam",nargs:"?",defaultValue:"spam"}),e.addArgument(["-z"],{"default":"84",nargs:"?",type:"int","const":"42",defaultValue:"84",constant:"42"}),t=e.parseArgs([]),assert.deepEqual(t,{y:"spam",x:null,z:84,w:null}),t=e.parseArgs(["-w"]),assert.deepEqual(t,{y:"spam",x:null,z:84,w:null}),t=e.parseArgs(["-w","2"]),assert.deepEqual(t,{y:"spam",x:null,z:84,w:"2"}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{y:"spam",x:42,z:84,w:null}),t=e.parseArgs(["-x","2"]),assert.deepEqual(t,{y:"spam",x:"2",z:84,w:null}),t=e.parseArgs(["-y"]),assert.deepEqual(t,{y:null,x:null,z:84,w:null}),t=e.parseArgs(["-y","2"]),assert.deepEqual(t,{y:"2",x:null,z:84,w:null}),t=e.parseArgs(["-z"]),assert.deepEqual(t,{y:"spam",x:null,z:42,w:null}),t=e.parseArgs(["-z","2"]),assert.deepEqual(t,{y:"spam",x:null,z:2,w:null}),assert.throws(function(){t=e.parseArgs(["2"])})}),it("test specifying an args for an Optional that accepts zero or more",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{nargs:"*"}),e.addArgument(["-y"],{"default":"spam",nargs:"*",defaultValue:"spam"}),t=e.parseArgs([]),assert.deepEqual(t,{y:"spam",x:null}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{y:"spam",x:[]}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{y:"spam",x:["a"]}),t=e.parseArgs(["-x","a","b"]),assert.deepEqual(t,{y:"spam",x:["a","b"]}),t=e.parseArgs(["-y"]),assert.deepEqual(t,{y:[],x:null}),t=e.parseArgs(["-y","a"]),assert.deepEqual(t,{y:["a"],x:null}),t=e.parseArgs(["-y","a","b"]),assert.deepEqual(t,{y:["a","b"],x:null}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test a Positional that specifies an nargs of 1",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:1}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:["a"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b"])})}),it("test a Positional that specifies an nargs of 2",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:2}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test a Positional with 2 nargs followed by one with none",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:2}),e.addArgument(["bar"],{}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:"c"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","b"])}),assert.throws(function(){t=e.parseArgs(["a","b","c","d"])})}),it("test a Positional with 2 nargs followed by one with one or more",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:2}),e.addArgument(["bar"],{nargs:"+"}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","b"])})}),it("test a Positional with 2 nargs followed by one optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:2}),e.addArgument(["bar"],{nargs:"?"}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"],bar:null}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:"c"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","b","c","d"])})}),it("test a Positional with 2 nargs followed by one with unlimited",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:2}),e.addArgument(["bar"],{nargs:"*"}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"],bar:[]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test a Positional that doesn't specify nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b"])})}),it("test a Positional with no nargs followed by one with 1",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:1}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test two Positionals that don't specify nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:"b"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test a Positional with no nargs followed by one with one or more",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:"+"}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:"a",bar:["b","c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test three Positionals: no nargs, one or more nargs and 1 nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:"+"}),e.addArgument(["baz"],{nargs:1}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{bar:["b"],foo:"a",baz:["c"]}),t=e.parseArgs(["a","b","c","d"]),assert.deepEqual(t,{bar:["b","c"],foo:"a",baz:["d"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["b"])})}),it("test a Positional with no nargs followed by one with an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:"?"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a",bar:null}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:"b"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test three Positionals: no nargs, optional narg and 1 nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{"default":.625,nargs:"?",defaultValue:.625}),e.addArgument(["baz"],{nargs:1}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{bar:.625,foo:"a",baz:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{bar:"b",foo:"a",baz:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test a Positional with no nargs followed by one with unlimited",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:"*"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a",bar:[]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:"a",bar:["b","c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])})}),it("test three Positionals: no nargs, unlimited nargs and 1 nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{}),e.addArgument(["bar"],{nargs:"*"}),e.addArgument(["baz"],{nargs:1}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{bar:[],foo:"a",baz:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{bar:["b"],foo:"a",baz:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test a Positional that specifies one or more nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"+"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["-x"])})}),it("test a Positional with one or more nargs followed by one with 1",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"+"}),e.addArgument(["bar"],{nargs:1}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a"],bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test a Positional with one or more nargs followed by one with none",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"+"}),e.addArgument(["bar"],{}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a"],bar:"b"}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:"c"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("tests an Optional Positional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"?"}),t=e.parseArgs([]),assert.deepEqual(t,{foo:null}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a"}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b"])})}),it("test a Positional with an Optional nargs followed by one with 1",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"?"}),e.addArgument(["bar"],{nargs:1}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:null,bar:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test an Optional Positional with a default value (that needs to be converted to the appropriate type.)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{"default":"42",type:"int",nargs:"?",defaultValue:"42"}),t=e.parseArgs([]),assert.deepEqual(t,{foo:42}),t=e.parseArgs(["1"]),assert.deepEqual(t,{foo:1}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b"])}),assert.throws(function(){t=e.parseArgs(["1","2"])})}),it("tests an Optional Positional with a default value",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{"default":42,nargs:"?",defaultValue:42}),t=e.parseArgs([]),assert.deepEqual(t,{foo:42}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a"}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a","b"])})}),it("test a Positional with an Optional nargs followed by one with none",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{"default":42,nargs:"?",defaultValue:42}),e.addArgument(["bar"],{}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:42,bar:"a"}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:"b"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test an Optional narg followed by one or more nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"?"}),e.addArgument(["bar"],{nargs:"+"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:null,bar:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:"a",bar:["b","c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])})}),it("test two optional nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"?"}),e.addArgument(["bar"],{"default":42,nargs:"?",defaultValue:42}),t=e.parseArgs([]),assert.deepEqual(t,{foo:null,bar:42}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a",bar:42}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:"b"}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["a","b","c"])})}),it("test an Optional narg followed by unlimited nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"?"}),e.addArgument(["bar"],{nargs:"*"}),t=e.parseArgs([]),assert.deepEqual(t,{foo:null,bar:[]}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:"a",bar:[]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:"a",bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:"a",bar:["b","c"]}),assert.throws(function(){t=e.parseArgs(["--foo"])})}),it("test a Positional that specifies unlimited nargs",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"*"}),t=e.parseArgs([]),assert.deepEqual(t,{foo:[]}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"]}),assert.throws(function(){t=e.parseArgs(["-x"])})}),it("test a Positional with unlimited nargs followed by one with 1",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"*"}),e.addArgument(["bar"],{nargs:1}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:[],bar:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a"],bar:["b"]}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:["c"]}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])})}),it("test a Positional that specifies unlimited nargs and a default",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{"default":"bar",nargs:"*",defaultValue:"bar"}),t=e.parseArgs([]),assert.deepEqual(t,{foo:"bar"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:["a"]}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a","b"]}),assert.throws(function(){t=e.parseArgs(["-x"])})}),it("test a Positional with unlimited nargs followed by one with none",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["foo"],{nargs:"*"}),e.addArgument(["bar"],{}),t=e.parseArgs(["a"]),assert.deepEqual(t,{foo:[],bar:"a"}),t=e.parseArgs(["a","b"]),assert.deepEqual(t,{foo:["a"],bar:"b"}),t=e.parseArgs(["a","b","c"]),assert.deepEqual(t,{foo:["a","b"],bar:"c"}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["--foo"])})}),it("test specifying a positional with nargs=REMAINDER",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["x"],{}),e.addArgument(["y"],{nargs:$$.REMAINDER}),e.addArgument(["-z"],{}),t=e.parseArgs(["X"]),assert.deepEqual(t,{y:[],x:"X",z:null}),t=e.parseArgs(["-z","Z","X"]),assert.deepEqual(t,{y:[],x:"X",z:"Z"}),t=e.parseArgs(["X","A","B","-z","Z"]),assert.deepEqual(t,{y:["A","B","-z","Z"],x:"X",z:null}),t=e.parseArgs(["X","Y","--foo"]),assert.deepEqual(t,{y:["Y","--foo"],x:"X",z:null}),assert.throws(function(){t=e.parseArgs([])}),assert.throws(function(){t=e.parseArgs(["-z"])}),assert.throws(function(){t=e.parseArgs(["-z","Z"])})}),it("test specifying an args for an Optional that accepts zero or more",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{nargs:"*"}),e.addArgument(["y"],{nargs:"*"}),t=e.parseArgs([]),assert.deepEqual(t,{y:[],x:null}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{y:[],x:[]}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{y:[],x:["a"]}),t=e.parseArgs(["-x","a","--","b"]),assert.deepEqual(t,{y:["b"],x:["a"]}),t=e.parseArgs(["a"]),assert.deepEqual(t,{y:["a"],x:null}),t=e.parseArgs(["a","-x"]),assert.deepEqual(t,{y:["a"],x:[]}),t=e.parseArgs(["a","-x","b"]),assert.deepEqual(t,{y:["a"],x:["b"]})}),it("should accept defaultValue for nargs:'*'",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["bar"],{nargs:"*",defaultValue:42}),t=e.parseArgs([]),assert.equal(t.bar,42)})});