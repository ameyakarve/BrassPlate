var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("base",function(){var e,t;it("should parse argument in short form",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),t=e.parseArgs("-f 1".split(" ")),assert.equal(t.foo,1),t=e.parseArgs("-f=1".split(" ")),assert.equal(t.foo,1),t=e.parseArgs("-f1".split(" ")),assert.equal(t.foo,1)}),it("should parse argument in long form",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),t=e.parseArgs("--foo 1".split(" ")),assert.equal(t.foo,1),t=e.parseArgs("--foo=1".split(" ")),assert.equal(t.foo,1)}),it("should parse multiple arguments",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["--bar"]),t=e.parseArgs("--foo 5 --bar 6".split(" ")),assert.equal(t.foo,5),assert.equal(t.bar,6)}),it("should check argument type",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["--bar"],{type:"int"}),assert.throws(function(){e.parseArgs("--bar bar".split(" "))}),assert.doesNotThrow(function(){e.parseArgs("--bar 1".split(" "))})}),it("should not drop down with empty args (without positional arguments)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),assert.doesNotThrow(function(){e.parseArgs([])})}),it("should drop down with empty args (positional arguments)",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["baz"]),assert.throws(function(){e.parseArgs([])},/too few arguments/)}),it("should support pseudo-argument",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["bar"],{nargs:"+"}),t=e.parseArgs(["-f","foo","--","-f","bar"]),assert.equal(t.foo,"foo"),assert.equal(t.bar.length,2)}),it("should support #setDefaults",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.setDefaults({bar:1}),t=e.parseArgs([]),assert.equal(t.bar,1)}),it("should throw TypeError with conflicting options",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),assert.throws(function(){e.addArgument(["-f"])},/Conflicting option string/),assert.throws(function(){e.addArgument(["--foo"])},/Conflicting option string/),assert.throws(function(){e.addArgument(["-f","--flame"])},/Conflicting option string/),assert.throws(function(){e.addArgument(["-m","--foo"])},/Conflicting option string/)}),it("should parse negative arguments",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["bar"],{type:"int"}),t=e.parseArgs(["-1"]),assert.equal(t.bar,-1)}),it("No negative number options; neg number is positional argument",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{dest:"x"}),e.addArgument(["foo"],{nargs:"?"}),t=e.parseArgs(["-x","-1"]),assert.equal(t.x,"-1"),t=e.parseArgs(["-x","-1","-5"]),assert.equal(t.x,"-1"),assert.equal(t.foo,"-5")}),it("negative number options present, so any neg number is an option",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-1"],{dest:"one"}),e.addArgument(["foo"],{nargs:"?"}),t=e.parseArgs(["-1","X"]),assert.equal(t.one,"X"),assert.throws(function(){e.parseArgs(["-2"])},/Unrecognized arguments: -2/),assert.throws(function(){e.parseArgs(["-1","-1"])},/argument "-1": Expected one argument/),t=e.parseArgs(["--","-f"]),assert.equal(t.foo,"-f")}),it("should infer option destination from long and short options",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["-g"]),e.addArgument(["-x"],{dest:"xxx"}),t=e.parseArgs(["-f","1"]),assert.deepEqual(t,{foo:"1",g:null,xxx:null}),t=e.parseArgs(["-g","2"]),assert.deepEqual(t,{foo:null,g:"2",xxx:null}),t=e.parseArgs(["-f",1,"-g",2,"-x",3]),assert.deepEqual(t,{foo:1,g:2,xxx:3})}),it("should accept 0 defaultValue",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["bar"],{nargs:"?",defaultValue:0}),t=e.parseArgs([]),assert.equal(t.bar,0)}),it("getDefault() should get defaults",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["-g","--goo"],{defaultValue:42}),assert.equal(e.getDefault("goo"),42),assert.equal(e.getDefault("help"),require("../lib/const").SUPPRESS)}),it("should handle mixed positional and optional args",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f","--foo"]),e.addArgument(["x"]),e.addArgument(["y"]),t=e.parseArgs(["X","Y"]),assert.deepEqual(t,{foo:null,x:"X",y:"Y"}),t=e.parseArgs(["-f","A","X","Y"]),assert.deepEqual(t,{foo:"A",x:"X",y:"Y"}),t=e.parseArgs(["X","-f","A","Y"]),assert.deepEqual(t,{foo:"A",x:"X",y:"Y"})}),it("test empty and space containing arguments",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["x"],{nargs:"?"}),e.addArgument(["-y","--yyy"],{dest:"y"}),t=e.parseArgs([""]),assert.deepEqual(t,{y:null,x:""}),t=e.parseArgs(["a badger"]),assert.deepEqual(t,{y:null,x:"a badger"}),t=e.parseArgs(["-a badger"]),assert.deepEqual(t,{y:null,x:"-a badger"}),t=e.parseArgs(["-y",""]),assert.deepEqual(t,{y:"",x:null}),t=e.parseArgs(["-y","a badger"]),assert.deepEqual(t,{y:"a badger",x:null}),t=e.parseArgs(["-y","-a badger"]),assert.deepEqual(t,{y:"-a badger",x:null}),t=e.parseArgs(["--yyy=a badger"]),assert.deepEqual(t,{y:"a badger",x:null}),t=e.parseArgs(["--yyy=-a badger"]),assert.deepEqual(t,{y:"-a badger",x:null}),assert.throws(function(){t=e.parseArgs(["-y"])})})});