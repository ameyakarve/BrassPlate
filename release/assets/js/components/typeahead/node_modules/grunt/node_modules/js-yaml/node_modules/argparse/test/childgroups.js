var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("child group",function(){var e,t,n,r,i;beforeEach(function(){t=new ArgumentParser({prog:"PROG",debug:!0,addHelp:!1}),t.addArgument(["--foo"],{help:"parent foo"}),n=t.addArgumentGroup({title:"parent group"}),n.addArgument(["--gfoo"],{help:"group foo help"}),n.addArgument(["gbar"],{help:"group bar help"}),r=t.addMutuallyExclusiveGroup({required:!0}),r.addArgument(["--xfoo"],{action:"storeTrue",help:"xfoo or xbar, set true"}),r.addArgument(["--xbar"],{action:"storeFalse",help:"xfoo or xbar, set false"}),i=new ArgumentParser({parents:[t],description:"child parser",debug:!0}),i.addArgument(["--cbar"],{help:"child bar opt arg"})}),it("compare help parent and child",function(){var e=t.formatHelp(),n=i.formatHelp();assert(e.match(/parent group:/)),assert(n.match(/parent group:/))}),it("child should  throw error if an xclusive group member is missing",function(){assert.throws(function(){e=i.parseArgs(["gbararg"])},/one of the arguments (.*) is required/)}),it("child accepts an xgroup item and positional arg from parent",function(){e=i.parseArgs(["--xbar","gbararg"]),assert.equal(e.gbar,"gbararg"),assert.equal(e.xbar,!1)}),it("child throws error if both xclusive options are given",function(){assert.throws(function(){e=i.parseArgs(["--xfoo","--xbar"])},/Not allowed with argument/)})});