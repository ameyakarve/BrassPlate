function setHelper(e,t,n){for(var r=[n,n+".*",n+".ns1",n+".ns1.ns2",n+".ns2.*"],i=0;r.length>i;i++)e.on(r[i],function(){t.ok(!0,r[i]+"has fired")});return r}var basicEvents=require("nodeunit").testCase,EventEmitter2;EventEmitter2="undefined"!=typeof require?require("../../lib/eventemitter2").EventEmitter2:window.EventEmitter2,module.exports=basicEvents({"1. An event can be namespaced.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test1.ns1",function(){e.ok(!0,"The event was raised")}),t.emit("test1.ns1"),e.expect(1),e.done()},"2. An event can be namespaced and accept values.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test2.ns1",function(t){e.ok(!0,"The event was raised"),e.ok(t!==void 0,"The event was raised with the value `"+t+"`.")}),t.emit("test2.ns1",1),e.expect(2),e.done()},"3. A namespaced event can be raised multiple times and accept values.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test3.ns1",function(t,n,r){e.ok(!0,"The event was raised"),e.ok(3===arguments.length,"The event was raised with the correct number of arguments"),e.ok(1===t||4===t,"The event was raised with the value `"+t+"`."),e.ok(2===n||5===n,"The event was raised with the value `"+n+"`."),e.ok(3===r||6===r,"The event was raised with the value `"+r+"`.")}),t.emit("test3.ns1",1,2,3),t.emit("test3.ns1",4,5,6),e.expect(10),e.done()},"4. A listener should support wild cards.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test4.*",function(){e.ok(!0,"The event was raised")}),t.emit("test4.ns1"),e.expect(1),e.done()},"5. Emitting an event should support wildcards.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test5A.test5B",function(){e.ok(!0,"The event was raised")}),t.emit("test5A.*"),e.expect(1),e.done()},"6. A listener should support complex wild cards.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test10.*.foo",function(){e.ok(!0,"The event was raised")}),t.emit("test10.ns1.foo"),e.expect(1),e.done()},"7. Emitting an event should support complex wildcards.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test11.ns1.foo",function(){e.ok(!0,"The event was raised")}),t.emit("test11.*.foo"),e.expect(1),e.done()},"8. Emitting an event should support complex wildcards multiple times, a valid listener should accept values.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test12.ns1.ns2",function(t,n,r){e.ok(!0,"The event was raised"),e.ok(3===arguments.length,"The event was raised with the correct number of arguments"),e.ok(1===t||4===t,"The event was raised with the value `"+t+"`."),e.ok(2===n||5===n,"The event was raised with the value `"+t+"`."),e.ok(3===r||6===r,"The event was raised with the value `"+t+"`.")}),t.emit("test12.*.ns2",1,2,3),t.emit("test12.*.ns2",4,5,6),e.expect(10),e.done()},"9. List all the listeners for a particular event.":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0});t.on("test13",function(){e.ok(!0,"raised one")}),t.on("test13",function(){e.ok(!0,"raised two")});var n=t.listeners("test13");e.ok(2===n.length,"The event `test13` should have 2 listeners"),e.expect(1),e.done()},"10. should be able to listen on any event":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0}),n=function(t,n){e.equal(this.event,"test23.ns5.ns5"),e.equal(t,"foo"),e.equal(n,1),e.ok(!0,"raised test23.ns5.ns5")};t.onAny(n),t.emit("test23.ns5.ns5","foo",1),e.expect(4),e.done()},"11. No warning should be raised if we set maxListener to be greater before adding":function(e){var t=new EventEmitter2({wildcard:!0,verbose:!0}),n="test29.*";t.setMaxListeners(20);for(var r=0;15>r;r++)t.on(n,function(){e.ok(!0,"event was raised")});var i=t.listeners(n);e.equal(i.length,15,"should have 15"),e.ok(!t.listenerTree.test29["*"]._listeners.warned,"should not have been set"),e.expect(2),e.done()}});