var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("group",function(){var e,t,n,r,i;it("group test",function(){e=new ArgumentParser({prog:"PROG",addHelp:!1,debug:!0}),n=e.addArgumentGroup({title:"group"}),n.addArgument(["--foo"],{help:"foo help"}),n.addArgument(["bar"],{help:"bar help"}),assert(n._groupActions.length,2)}),it("2 groups test",function(){e=new ArgumentParser({prog:"PROG",addHelp:!1,debug:!0}),r=e.addArgumentGroup({title:"group1",description:"group1 description"}),r.addArgument(["foo"],{help:"foo help"}),i=e.addArgumentGroup({title:"group2",description:"group2 description"}),i.addArgument(["--bar"],{help:"bar help"}),assert(r._groupActions.length,1),assert(e._actionGroups.length,4)}),it("mutually exclusive group test",function(){e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup(),n.addArgument(["--foo"],{action:"storeTrue"}),n.addArgument(["--bar"],{action:"storeFalse"}),t=e.parseArgs([]),assert.equal(t.foo,!1),assert.equal(t.bar,!0),t=e.parseArgs(["--foo"]),assert.equal(t.foo,!0),assert.equal(t.bar,!0),t=e.parseArgs(["--bar"]),assert.equal(t.foo||t.bar,!1)}),it("mutually exclusive group test (2)",function(){e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup(),n.addArgument(["--foo"],{action:"storeTrue"}),n.addArgument(["--bar"],{action:"storeFalse"}),assert.throws(function(){t=e.parseArgs(["--foo","--bar"])},function(e){var t=/(.*): not allowed with argument (.*)/i;if(e instanceof Error){var n=e.message.match(t);return n&&n[1]!==n[2]}},"unexpected error")}),it("mutually exclusive group test (3)",function(){e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup({required:!0}),n.addArgument(["--foo"],{action:"storeTrue"}),n.addArgument(["--bar"],{action:"storeFalse"}),assert.equal(n.required,!0),assert.equal(n._groupActions.length,2),assert.throws(function(){t=e.parseArgs([])},/one of the arguments (.*) is required/i)}),it("mutually exclusive group usage",function(){var r;e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup({required:!0}),n.addArgument(["--bar"],{help:"bar help"}),n.addArgument(["--baz"],{nargs:"?",constant:"Z",help:"baz help"}),t=e.parseArgs(["--bar","X"]),assert.deepEqual(t,{bar:"X",baz:null}),assert.throws(function(){t=e.parseArgs("--bar X --baz Y".split(" "))},/Not allowed with argument/i),r=e.formatUsage(),assert.equal(r,"usage: PROG [-h] (--bar BAR | --baz [BAZ])\n"),n.required=!1,r=e.formatUsage(),assert.equal(r,"usage: PROG [-h] [--bar BAR | --baz [BAZ]]\n")}),it("mutually exclusive optional and positional",function(){var r;e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup({required:!0}),n.addArgument(["--foo"],{action:"storeTrue",help:"foo help"}),n.addArgument(["--spam"],{help:"spam help"}),n.addArgument(["badger"],{nargs:"*",defaultValue:"X",help:"badger help"}),t=e.parseArgs(["--spam","S"]),assert.deepEqual(t,{foo:!1,spam:"S",badger:"X"}),t=e.parseArgs(["X"]),assert.deepEqual(t,{foo:!1,spam:null,badger:["X"]}),t=e.parseArgs(["--foo"]),assert.deepEqual(t,{foo:!0,spam:null,badger:"X"}),assert.throws(function(){t=e.parseArgs("--foo --spam 5".split(" "))},/Not allowed with argument/i),r=e.formatUsage(),assert.equal(r,"usage: PROG [-h] (--foo | --spam SPAM | badger [badger ...])\n"),n.required=!1,r=e.formatUsage(),assert.equal(r,"usage: PROG [-h] [--foo | --spam SPAM | badger [badger ...]]\n")}),it("two mutually exclusive groups",function(){var t,n,r;e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup({required:!0}),n.addArgument(["--foo"],{action:"storeTrue"}),n.addArgument(["--bar"],{action:"storeFalse"}),r=e.addMutuallyExclusiveGroup({required:!1}),r.addArgument(["--soup"],{action:"storeTrue"}),r.addArgument(["--nuts"],{action:"storeFalse"}),t=e.formatUsage(),assert.equal(t,"usage: PROG [-h] (--foo | --bar) [--soup | --nuts]\n")}),it("suppressed and single action groups",function(){var t,n,r;e=new ArgumentParser({prog:"PROG",debug:!0}),n=e.addMutuallyExclusiveGroup(),n.addArgument(["--sup"],{help:"==SUPPRESS=="}),r=e.addMutuallyExclusiveGroup({required:!0}),r.addArgument(["--xxx"],{}),t=e.formatUsage(),assert.equal(t,"usage: PROG [-h]  --xxx XXX\n")})});