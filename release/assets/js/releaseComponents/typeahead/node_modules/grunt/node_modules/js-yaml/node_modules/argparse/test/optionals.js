var assert=require("assert"),ArgumentParser=require("../lib/argparse").ArgumentParser;describe("optionals",function(){var e,t;it("test options that may or may not be arguments",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{type:"float"}),e.addArgument(["-3"],{dest:"y",type:"float"}),e.addArgument(["z"],{nargs:"*"}),t=e.parseArgs([]),assert.deepEqual(t,{y:null,x:null,z:[]}),t=e.parseArgs(["-x","2.5"]),assert.deepEqual(t,{y:null,x:2.5,z:[]}),t=e.parseArgs(["-x","2.5","a"]),assert.deepEqual(t,{y:null,x:2.5,z:["a"]}),t=e.parseArgs(["-3.5"]),assert.deepEqual(t,{y:.5,x:null,z:[]}),t=e.parseArgs(["-3-.5"]),assert.deepEqual(t,{y:-.5,x:null,z:[]}),t=e.parseArgs(["-3",".5"]),assert.deepEqual(t,{y:.5,x:null,z:[]}),t=e.parseArgs(["a","-3.5"]),assert.deepEqual(t,{y:.5,x:null,z:["a"]}),t=e.parseArgs(["a"]),assert.deepEqual(t,{y:null,x:null,z:["a"]}),t=e.parseArgs(["a","-x","1"]),assert.deepEqual(t,{y:null,x:1,z:["a"]}),t=e.parseArgs(["-x","1","a"]),assert.deepEqual(t,{y:null,x:1,z:["a"]}),t=e.parseArgs(["-3","1","a"]),assert.deepEqual(t,{y:1,x:null,z:["a"]}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["-y2.5"])}),assert.throws(function(){t=e.parseArgs(["-xa"])}),assert.throws(function(){t=e.parseArgs(["-x","-a"])}),assert.throws(function(){t=e.parseArgs(["-x","-3"])}),assert.throws(function(){t=e.parseArgs(["-x","-3.5"])}),assert.throws(function(){t=e.parseArgs(["-3","-3.5"])}),assert.throws(function(){t=e.parseArgs(["-x","-2.5"])}),assert.throws(function(){t=e.parseArgs(["-x","-2.5","a"])}),assert.throws(function(){t=e.parseArgs(["-3","-.5"])}),assert.throws(function(){t=e.parseArgs(["a","x","-1"])}),assert.throws(function(){t=e.parseArgs(["-x","-1","a"])}),assert.throws(function(){t=e.parseArgs(["-3","-1","a"])})}),it("test the append action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--baz"],{action:"append"}),t=e.parseArgs([]),assert.deepEqual(t,{baz:null}),t=e.parseArgs(["--baz","a"]),assert.deepEqual(t,{baz:["a"]}),t=e.parseArgs(["--baz","a","--baz","b"]),assert.deepEqual(t,{baz:["a","b"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--baz"])}),assert.throws(function(){t=e.parseArgs(["a","--baz"])}),assert.throws(function(){t=e.parseArgs(["--baz","a","b"])})}),it("test the append_const action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-b"],{action:"appendConst","const":"Exception",constant:"Exception"}),e.addArgument(["-c"],{dest:"b",action:"append"}),t=e.parseArgs([]),assert.deepEqual(t,{b:null}),t=e.parseArgs(["-b"]),assert.deepEqual(t,{b:["Exception"]}),t=e.parseArgs(["-b","-cx","-b","-cyz"]),assert.deepEqual(t,{b:["Exception","x","Exception","yz"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-c"])}),assert.throws(function(){t=e.parseArgs(["a","-c"])}),assert.throws(function(){t=e.parseArgs(["-bx"])}),assert.throws(function(){t=e.parseArgs(["-b","x"])})}),it("test the append_const action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-b"],{"default":["X"],action:"appendConst","const":"Exception",defaultValue:["X"],constant:"Exception"}),e.addArgument(["-c"],{dest:"b",action:"append"}),t=e.parseArgs([]),assert.deepEqual(t,{b:["X"]}),t=e.parseArgs(["-b"]),assert.deepEqual(t,{b:["X","Exception"]}),t=e.parseArgs(["-b","-cx","-b","-cyz"]),assert.deepEqual(t,{b:["X","Exception","x","Exception","yz"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-c"])}),assert.throws(function(){t=e.parseArgs(["a","-c"])}),assert.throws(function(){t=e.parseArgs(["-bx"])}),assert.throws(function(){t=e.parseArgs(["-b","x"])})}),it("test the append action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--baz"],{"default":["X"],action:"append",defaultValue:["X"]}),t=e.parseArgs([]),assert.deepEqual(t,{baz:["X"]}),t=e.parseArgs(["--baz","a"]),assert.deepEqual(t,{baz:["X","a"]}),t=e.parseArgs(["--baz","a","--baz","b"]),assert.deepEqual(t,{baz:["X","a","b"]}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--baz"])}),assert.throws(function(){t=e.parseArgs(["a","--baz"])}),assert.throws(function(){t=e.parseArgs(["--baz","a","b"])})}),it("test the count action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{action:"count"}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{x:1}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-x","a"])}),assert.throws(function(){t=e.parseArgs(["-x","b"])}),assert.throws(function(){t=e.parseArgs(["-x","a","-x","b"])})}),it("test the store action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{action:"store"}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-xfoo"]),assert.deepEqual(t,{x:"foo"}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["a","-x"])})}),it("test the store_const action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-y"],{action:"storeConst","const":"object",constant:"object"}),t=e.parseArgs([]),assert.deepEqual(t,{y:null}),t=e.parseArgs(["-y"]),assert.deepEqual(t,{y:"object"}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test the store_false action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-z"],{action:"storeFalse"}),t=e.parseArgs([]),assert.deepEqual(t,{z:!0}),t=e.parseArgs(["-z"]),assert.deepEqual(t,{z:!1}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-za"])}),assert.throws(function(){t=e.parseArgs(["-z","a"])})}),it("test the store_true action for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--apple"],{action:"storeTrue"}),t=e.parseArgs([]),assert.deepEqual(t,{apple:!1}),t=e.parseArgs(["--apple"]),assert.deepEqual(t,{apple:!0}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--apple=b"])}),assert.throws(function(){t=e.parseArgs(["--apple","b"])})}),it("test negative number args when almost numeric options are present",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["x"],{nargs:"?"}),e.addArgument(["-k4"],{action:"storeTrue",dest:"y"}),t=e.parseArgs([]),assert.deepEqual(t,{y:!1,x:null}),t=e.parseArgs(["-2"]),assert.deepEqual(t,{y:!1,x:"-2"}),t=e.parseArgs(["a"]),assert.deepEqual(t,{y:!1,x:"a"}),t=e.parseArgs(["-k4"]),assert.deepEqual(t,{y:!0,x:null}),t=e.parseArgs(["-k4","a"]),assert.deepEqual(t,{y:!0,x:"a"}),assert.throws(function(){t=e.parseArgs(["-k3"])})}),it("test specifying the choices for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f"],{choices:"abc"}),e.addArgument(["-g"],{type:"int",choices:[0,1,2,3,4]}),t=e.parseArgs([]),assert.deepEqual(t,{g:null,f:null}),t=e.parseArgs(["-f","a"]),assert.deepEqual(t,{g:null,f:"a"}),t=e.parseArgs(["-f","c"]),assert.deepEqual(t,{g:null,f:"c"}),t=e.parseArgs(["-g","0"]),assert.deepEqual(t,{g:0,f:null}),t=e.parseArgs(["-g","03"]),assert.deepEqual(t,{g:3,f:null}),t=e.parseArgs(["-fb","-g4"]),assert.deepEqual(t,{g:4,f:"b"}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-f","d"])}),assert.throws(function(){t=e.parseArgs(["-fad"])}),assert.throws(function(){t=e.parseArgs(["-ga"])}),assert.throws(function(){t=e.parseArgs(["-g","6"])})}),it("test specifying a default for an Optional",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{}),e.addArgument(["-y"],{"default":42,defaultValue:42}),t=e.parseArgs([]),assert.deepEqual(t,{y:42,x:null}),t=e.parseArgs(["-xx"]),assert.deepEqual(t,{y:42,x:"x"}),t=e.parseArgs(["-yy"]),assert.deepEqual(t,{y:"y",x:null}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test various means of setting destination",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo-bar"],{}),e.addArgument(["--baz"],{dest:"zabbaz"}),t=e.parseArgs(["--foo-bar","f"]),assert.deepEqual(t,{zabbaz:null,foo_bar:"f"}),t=e.parseArgs(["--baz","g"]),assert.deepEqual(t,{zabbaz:"g",foo_bar:null}),t=e.parseArgs(["--foo-bar","h","--baz","i"]),assert.deepEqual(t,{zabbaz:"i",foo_bar:"h"}),t=e.parseArgs(["--baz","j","--foo-bar","k"]),assert.deepEqual(t,{zabbaz:"j",foo_bar:"k"}),assert.throws(function(){t=e.parseArgs(["a"])})}),it("test an Optional with a double-dash option string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--foo"],{}),t=e.parseArgs([]),assert.deepEqual(t,{foo:null}),t=e.parseArgs(["--foo","a"]),assert.deepEqual(t,{foo:"a"}),t=e.parseArgs(["--foo=a"]),assert.deepEqual(t,{foo:"a"}),t=e.parseArgs(["--foo","-2.5"]),assert.deepEqual(t,{foo:"-2.5"}),t=e.parseArgs(["--foo=-2.5"]),assert.deepEqual(t,{foo:"-2.5"}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["-f"])}),assert.throws(function(){t=e.parseArgs(["-f","a"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--foo","-x"])}),assert.throws(function(){t=e.parseArgs(["--foo","--bar"])})}),it("tests partial matching with a double-dash option string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["--badger"],{action:"storeTrue"}),e.addArgument(["--bat"],{}),t=e.parseArgs([]),assert.deepEqual(t,{bat:null,badger:!1}),t=e.parseArgs(["--bat","X"]),assert.deepEqual(t,{bat:"X",badger:!1}),t=e.parseArgs(["--bad"]),assert.deepEqual(t,{bat:null,badger:!0}),t=e.parseArgs(["--badg"]),assert.deepEqual(t,{bat:null,badger:!0}),t=e.parseArgs(["--badge"]),assert.deepEqual(t,{bat:null,badger:!0}),t=e.parseArgs(["--badger"]),assert.deepEqual(t,{bat:null,badger:!0}),assert.throws(function(){t=e.parseArgs(["--bar"])}),assert.throws(function(){t=e.parseArgs(["--b"])}),assert.throws(function(){t=e.parseArgs(["--ba"])}),assert.throws(function(){t=e.parseArgs(["--b=2"])}),assert.throws(function(){t=e.parseArgs(["--ba=4"])}),assert.throws(function(){t=e.parseArgs(["--badge","5"])})}),it("test an Optional with a short opt string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-1"],{dest:"one"}),t=e.parseArgs([]),assert.deepEqual(t,{one:null}),t=e.parseArgs(["-1","a"]),assert.deepEqual(t,{one:"a"}),t=e.parseArgs(["-1a"]),assert.deepEqual(t,{one:"a"}),t=e.parseArgs(["-1-2"]),assert.deepEqual(t,{one:"-2"}),assert.throws(function(){t=e.parseArgs(["-1"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-1","--foo"])}),assert.throws(function(){t=e.parseArgs(["-1","-y"])}),assert.throws(function(){t=e.parseArgs(["-1","-1"])}),assert.throws(function(){t=e.parseArgs(["-1","-2"])})}),it("test negative number args when numeric options are present",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["x"],{nargs:"?"}),e.addArgument(["-4"],{action:"storeTrue",dest:"y"}),t=e.parseArgs([]),assert.deepEqual(t,{y:!1,x:null}),t=e.parseArgs(["a"]),assert.deepEqual(t,{y:!1,x:"a"}),t=e.parseArgs(["-4"]),assert.deepEqual(t,{y:!0,x:null}),t=e.parseArgs(["-4","a"]),assert.deepEqual(t,{y:!0,x:"a"}),assert.throws(function(){t=e.parseArgs(["-2"])}),assert.throws(function(){t=e.parseArgs(["-315"])})}),it("tests the an optional action that is required",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{required:!0,type:"int"}),t=e.parseArgs(["-x","1"]),assert.deepEqual(t,{x:1}),t=e.parseArgs(["-x42"]),assert.deepEqual(t,{x:42}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs([])})}),it("test a combination of single- and double-dash option strings",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-v","--verbose","-n","--noisy"],{action:"storeTrue"}),t=e.parseArgs([]),assert.deepEqual(t,{verbose:!1}),t=e.parseArgs(["-v"]),assert.deepEqual(t,{verbose:!0}),t=e.parseArgs(["--verbose"]),assert.deepEqual(t,{verbose:!0}),t=e.parseArgs(["-n"]),assert.deepEqual(t,{verbose:!0}),t=e.parseArgs(["--noisy"]),assert.deepEqual(t,{verbose:!0}),assert.throws(function(){t=e.parseArgs(["--x","--verbose"])}),assert.throws(function(){t=e.parseArgs(["-N"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["-v","x"])})}),it("test an Optional with a single-dash option string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{}),t=e.parseArgs([]),assert.deepEqual(t,{x:null}),t=e.parseArgs(["-x","a"]),assert.deepEqual(t,{x:"a"}),t=e.parseArgs(["-xa"]),assert.deepEqual(t,{x:"a"}),t=e.parseArgs(["-x","-1"]),assert.deepEqual(t,{x:"-1"}),t=e.parseArgs(["-x-1"]),assert.deepEqual(t,{x:"-1"}),assert.throws(function(){t=e.parseArgs(["-x"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["-x","--foo"])}),assert.throws(function(){t=e.parseArgs(["-x","-y"])})}),it("test Optionals that partially match but are not subsets",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-foobar"],{}),e.addArgument(["-foorab"],{}),t=e.parseArgs([]),assert.deepEqual(t,{foorab:null,foobar:null}),t=e.parseArgs(["-foob","a"]),assert.deepEqual(t,{foorab:null,foobar:"a"}),t=e.parseArgs(["-foor","a"]),assert.deepEqual(t,{foorab:"a",foobar:null}),t=e.parseArgs(["-fooba","a"]),assert.deepEqual(t,{foorab:null,foobar:"a"}),t=e.parseArgs(["-foora","a"]),assert.deepEqual(t,{foorab:"a",foobar:null}),t=e.parseArgs(["-foobar","a"]),assert.deepEqual(t,{foorab:null,foobar:"a"}),t=e.parseArgs(["-foorab","a"]),assert.deepEqual(t,{foorab:"a",foobar:null}),assert.throws(function(){t=e.parseArgs(["-f"])}),assert.throws(function(){t=e.parseArgs(["-f","a"])}),assert.throws(function(){t=e.parseArgs(["-fa"])}),assert.throws(function(){t=e.parseArgs(["-foa"])}),assert.throws(function(){t=e.parseArgs(["-foo"])}),assert.throws(function(){t=e.parseArgs(["-fo"])}),assert.throws(function(){t=e.parseArgs(["-foo","b"])})}),it("test an Optional with a single-dash option string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-x"],{action:"storeTrue"}),e.addArgument(["-yyy"],{action:"storeConst","const":42,constant:42}),e.addArgument(["-z"],{}),t=e.parseArgs([]),assert.deepEqual(t,{x:!1,z:null,yyy:null}),t=e.parseArgs(["-x"]),assert.deepEqual(t,{x:!0,z:null,yyy:null}),t=e.parseArgs(["-za"]),assert.deepEqual(t,{x:!1,z:"a",yyy:null}),t=e.parseArgs(["-z","a"]),assert.deepEqual(t,{x:!1,z:"a",yyy:null}),t=e.parseArgs(["-xza"]),assert.deepEqual(t,{x:!0,z:"a",yyy:null}),t=e.parseArgs(["-xz","a"]),assert.deepEqual(t,{x:!0,z:"a",yyy:null}),t=e.parseArgs(["-x","-za"]),assert.deepEqual(t,{x:!0,z:"a",yyy:null}),t=e.parseArgs(["-x","-z","a"]),assert.deepEqual(t,{x:!0,z:"a",yyy:null}),t=e.parseArgs(["-y"]),assert.deepEqual(t,{x:!1,z:null,yyy:42}),t=e.parseArgs(["-yyy"]),assert.deepEqual(t,{x:!1,z:null,yyy:42}),t=e.parseArgs(["-x","-yyy","-za"]),assert.deepEqual(t,{x:!0,z:"a",yyy:42}),t=e.parseArgs(["-x","-yyy","-z","a"]),assert.deepEqual(t,{x:!0,z:"a",yyy:42}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["-xa"])}),assert.throws(function(){t=e.parseArgs(["-x","--foo"])}),assert.throws(function(){t=e.parseArgs(["-x","-z"])}),assert.throws(function(){t=e.parseArgs(["-z","-x"])}),assert.throws(function(){t=e.parseArgs(["-yx"])}),assert.throws(function(){t=e.parseArgs(["-yz","a"])}),assert.throws(function(){t=e.parseArgs(["-yyyx"])}),assert.throws(function(){t=e.parseArgs(["-yyyza"])}),assert.throws(function(){t=e.parseArgs(["-xyza"])})}),it("test an Optional with a multi-character single-dash option string",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-foo"],{}),t=e.parseArgs([]),assert.deepEqual(t,{foo:null}),t=e.parseArgs(["-foo","a"]),assert.deepEqual(t,{foo:"a"}),t=e.parseArgs(["-foo","-1"]),assert.deepEqual(t,{foo:"-1"}),t=e.parseArgs(["-fo","a"]),assert.deepEqual(t,{foo:"a"}),t=e.parseArgs(["-f","a"]),assert.deepEqual(t,{foo:"a"}),assert.throws(function(){t=e.parseArgs(["-foo"])}),assert.throws(function(){t=e.parseArgs(["a"])}),assert.throws(function(){t=e.parseArgs(["--foo"])}),assert.throws(function(){t=e.parseArgs(["-foo","--foo"])}),assert.throws(function(){t=e.parseArgs(["-foo","-y"])}),assert.throws(function(){t=e.parseArgs(["-fooa"])})}),it("test Optionals where option strings are subsets of each other",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f"],{}),e.addArgument(["-foobar"],{}),e.addArgument(["-foorab"],{}),t=e.parseArgs([]),assert.deepEqual(t,{foorab:null,f:null,foobar:null}),t=e.parseArgs(["-f","a"]),assert.deepEqual(t,{foorab:null,f:"a",foobar:null}),t=e.parseArgs(["-fa"]),assert.deepEqual(t,{foorab:null,f:"a",foobar:null}),t=e.parseArgs(["-foa"]),assert.deepEqual(t,{foorab:null,f:"oa",foobar:null}),t=e.parseArgs(["-fooa"]),assert.deepEqual(t,{foorab:null,f:"ooa",foobar:null}),t=e.parseArgs(["-foobar","a"]),assert.deepEqual(t,{foorab:null,f:null,foobar:"a"}),t=e.parseArgs(["-foorab","a"]),assert.deepEqual(t,{foorab:"a",f:null,foobar:null}),assert.throws(function(){t=e.parseArgs(["-f"])}),assert.throws(function(){t=e.parseArgs(["-foo"])}),assert.throws(function(){t=e.parseArgs(["-fo"])}),assert.throws(function(){t=e.parseArgs(["-foo","b"])}),assert.throws(function(){t=e.parseArgs(["-foob"])}),assert.throws(function(){t=e.parseArgs(["-fooba"])}),assert.throws(function(){t=e.parseArgs(["-foora"])})}),it("test an Optional with single- and double-dash option strings",function(){e=new ArgumentParser({debug:!0}),e.addArgument(["-f"],{action:"storeTrue"}),e.addArgument(["--bar"],{}),e.addArgument(["-baz"],{action:"storeConst","const":42,constant:42}),t=e.parseArgs([]),assert.deepEqual(t,{bar:null,baz:null,f:!1}),t=e.parseArgs(["-f"]),assert.deepEqual(t,{bar:null,baz:null,f:!0}),t=e.parseArgs(["--ba","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!1}),t=e.parseArgs(["-f","--bar","B"]),assert.deepEqual(t,{bar:"B",baz:null,f:!0}),t=e.parseArgs(["-f","-b"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),t=e.parseArgs(["-ba","-f"]),assert.deepEqual(t,{bar:null,baz:42,f:!0}),assert.throws(function(){t=e.parseArgs(["--bar"])}),assert.throws(function(){t=e.parseArgs(["-fbar"])}),assert.throws(function(){t=e.parseArgs(["-fbaz"])}),assert.throws(function(){t=e.parseArgs(["-bazf"])}),assert.throws(function(){t=e.parseArgs(["-b","B"])}),assert.throws(function(){t=e.parseArgs(["B"])})})});