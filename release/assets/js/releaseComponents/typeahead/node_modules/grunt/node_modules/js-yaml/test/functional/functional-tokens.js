var Assert=require("assert"),Fs=require("fs"),JsYaml=require("../../lib/js-yaml"),Common=require("../../lib/js-yaml/common"),Tokens=require("../../lib/js-yaml/tokens"),Helper=require("../helper"),REPLACES=new Common.Hash;REPLACES.store(Tokens.DirectiveToken,"%"),REPLACES.store(Tokens.DocumentStartToken,"---"),REPLACES.store(Tokens.DocumentEndToken,"..."),REPLACES.store(Tokens.AliasToken,"*"),REPLACES.store(Tokens.AnchorToken,"&"),REPLACES.store(Tokens.TagToken,"!"),REPLACES.store(Tokens.ScalarToken,"_"),REPLACES.store(Tokens.BlockSequenceStartToken,"[["),REPLACES.store(Tokens.BlockMappingStartToken,"{{"),REPLACES.store(Tokens.BlockEndToken,"]}"),REPLACES.store(Tokens.FlowSequenceStartToken,"["),REPLACES.store(Tokens.FlowSequenceEndToken,"]"),REPLACES.store(Tokens.FlowMappingStartToken,"{"),REPLACES.store(Tokens.FlowMappingEndToken,"}"),REPLACES.store(Tokens.BlockEntryToken,","),REPLACES.store(Tokens.FlowEntryToken,","),REPLACES.store(Tokens.KeyToken,"?"),REPLACES.store(Tokens.ValueToken,":"),module.exports={"Test tokens":Helper.functional({dirname:__dirname+"/data",files:[".data",".tokens"],test:function(e,t){var n=[],r=[];Fs.readFileSync(t,"utf8").split(/[ \n]/).forEach(function(e){e&&r.push(e)}),JsYaml.scan(Fs.readFileSync(e,"utf8"),function(e){Common.isInstanceOf(e,Tokens.StreamStartToken)||Common.isInstanceOf(e,Tokens.StreamEndToken)||n.push(REPLACES.get(e.constructor))}),Assert.equal(n.length,r.length),n.forEach(function(e,t){Assert.equal(r[t],e)})}})};